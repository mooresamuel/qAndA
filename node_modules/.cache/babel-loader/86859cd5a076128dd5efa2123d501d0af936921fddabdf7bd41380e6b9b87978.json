{"ast":null,"code":"import { API_URL } from \"../utils/constants\";\nexport async function textToSpeechAPI(message) {\n  const options = {\n    method: \"POST\",\n    headers: {\n      Accept: \"mp3\",\n      // Expect MP3 audio from backend\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      message: message\n    }) // Send text message to backend\n  };\n  try {\n    const response = await fetch(`${API_URL}/speak_text`, options);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch audio\");\n    }\n\n    // Assuming the server returns an MP3 or another playable format\n    const audioBlob = await response.blob(); // Get the audio as a Blob\n\n    // Create an object URL for the blob\n    const audioUrl = URL.createObjectURL(audioBlob);\n\n    // Create an audio element to play the audio\n    const audio = new Audio(audioUrl);\n    audio.onended = () => {\n      console.log('Audio playback finished');\n    };\n    audio.play(); // Play the audio\n  } catch (error) {\n    console.error(\"Error while fetching or playing audio:\", error);\n  }\n}","map":{"version":3,"names":["API_URL","textToSpeechAPI","message","options","method","headers","Accept","body","JSON","stringify","response","fetch","ok","Error","audioBlob","blob","audioUrl","URL","createObjectURL","audio","Audio","onended","console","log","play","error"],"sources":["/home/samoore/tpd/new/src/services/text2SpeechAPI.js"],"sourcesContent":["import { API_URL } from \"../utils/constants\";\r\n\r\nexport async function textToSpeechAPI(message) {\r\n  const options = {\r\n    method: \"POST\",\r\n    headers: {\r\n        Accept: \"mp3\",  // Expect MP3 audio from backend\r\n        \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ message: message }),  // Send text message to backend\r\n};\r\n\r\ntry {\r\n    const response = await fetch(`${API_URL}/speak_text`, options);\r\n\r\n    if (!response.ok) {\r\n        throw new Error(\"Failed to fetch audio\");\r\n    }\r\n\r\n    // Assuming the server returns an MP3 or another playable format\r\n    const audioBlob = await response.blob();  // Get the audio as a Blob\r\n\r\n    // Create an object URL for the blob\r\n    const audioUrl = URL.createObjectURL(audioBlob);\r\n\r\n    // Create an audio element to play the audio\r\n    const audio = new Audio(audioUrl);\r\n    audio.onended = () => {\r\n        console.log('Audio playback finished');\r\n    };\r\n    audio.play();  // Play the audio\r\n\r\n} catch (error) {\r\n    console.error(\"Error while fetching or playing audio:\", error);\r\n}\r\n}\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,oBAAoB;AAE5C,OAAO,eAAeC,eAAeA,CAACC,OAAO,EAAE;EAC7C,MAAMC,OAAO,GAAG;IACdC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACLC,MAAM,EAAE,KAAK;MAAG;MAChB,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,OAAO,EAAEA;IAAQ,CAAC,CAAC,CAAG;EACjD,CAAC;EAED,IAAI;IACA,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,OAAO,aAAa,EAAEG,OAAO,CAAC;IAE9D,IAAI,CAACO,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC5C;;IAEA;IACA,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC,CAAE;;IAE1C;IACA,MAAMC,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACJ,SAAS,CAAC;;IAE/C;IACA,MAAMK,KAAK,GAAG,IAAIC,KAAK,CAACJ,QAAQ,CAAC;IACjCG,KAAK,CAACE,OAAO,GAAG,MAAM;MAClBC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IAC1C,CAAC;IACDJ,KAAK,CAACK,IAAI,CAAC,CAAC,CAAC,CAAE;EAEnB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZH,OAAO,CAACG,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;EAClE;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}