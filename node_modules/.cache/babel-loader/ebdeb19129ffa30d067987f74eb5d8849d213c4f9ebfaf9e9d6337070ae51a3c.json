{"ast":null,"code":"import{useEffect,useState,useRef}from\"react\";import{useGlobalContext}from\"../../Contexts/GlobalContext\";import{useExerciseData}from\"../../Contexts/ExerciseContext\";import TextToSpeech from\"../TextToSpeech/TextToSpeech\";import NextButtonRight from\"../NextButtonRight/NextButtonRight\";import ProgressBar from\"../ProgressBar/ProgressBar\";import AnimatedTag from\"../AnimatedTag/AnimatedTag\";import QuestionMarkSVG from\"../QuestionMarkSVG/QuestionMarkSVG\";import ModalElement from\"../ModalElement/ModalElement\";// const question = {\n//   answers: ['because', \"done\", \"tasks\", \"the\"],\n//   data: ['tasks', \"the\", 'because', \"done\"],\n//   prompts: ['She felt happy %//gap//% she had %//gap//% all her %//gap//% before the end of %//gap//% day.'],\n//   question_id: 12,\n//   question_number: 1,\n//   question_type: \"complete_sentence\"\n// }\n// const question = {\n//   \"question_id\": \"1\",\n//   \"question_type\": \"complete-sentence\",\n//   \"prompts\": [\n//       \"The %//gap//% was walking to the %//gap//% when she saw a %//gap//% standing near her %//gap//%, so she decided to %//gap//% back.\"\n//   ],\n//   \"gaps\": 5,\n//   \"data\": [\n//       \"girl\",\n//       \"store\",\n//       \"bird\",\n//       \"home\",\n//       \"turn\"\n//   ],\n//   \"answers\": [\n//       \"girl\",\n//       \"store\",\n//       \"bird\",\n//       \"home\",\n//       \"turn\"\n//   ]\n// }\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function QuestionCompleteSentence(_ref){let{question}=_ref;const{setSelector,element}=useGlobalContext();const{handleNextQuestion,handleAddMistake}=useExerciseData();const topGapRefs=useRef([]);const bottomWordRefs=useRef([]);const[answers,setAnswers]=useState(Array.from(question.answers,()=>false));const[currentIndex,setCurrentIndex]=useState(0);const[animatingWord,setAnimatingWord]=useState(null);const[enable,setEnabled]=useState(false);const splitSentence=question.prompts[0].split(\"%\");const[tryAgain,setTryAgain]=useState(false);const _allGapsIndex=splitSentence.map((w,i)=>w===\"//gap//\"?i:null).filter(i=>i!==null);const[speechArray,setSpeechArray]=useState(question.prompts[0].split(\"%\"));const[speech,setSpeech]=useState(\"\");const[reset,setReset]=useState(false);function handleAnswerPicked(answer,index){var _topGapRefs$current$g,_bottomWordRefs$curre;if(answers.every(word=>typeof word===\"string\")){return;}let tempIndex=currentIndex;const arrAnswers=answers.map((el,i)=>{if(i===tempIndex){return answer;}else{return el;}});const tempGapIndex=_allGapsIndex[tempIndex];const tempSpeechArray=speechArray.map((word,i,arr)=>{if(i===tempGapIndex){return answer;}else{return word;}});setSpeechArray(tempSpeechArray);const findEmptyIndex=arrAnswers.findIndex(word=>word===false);const gapIndex=_allGapsIndex[tempIndex];const topRect=(_topGapRefs$current$g=topGapRefs.current[gapIndex])===null||_topGapRefs$current$g===void 0?void 0:_topGapRefs$current$g.getBoundingClientRect();const bottomRect=(_bottomWordRefs$curre=bottomWordRefs.current[index])===null||_bottomWordRefs$curre===void 0?void 0:_bottomWordRefs$curre.getBoundingClientRect();if(!bottomRect||!topRect)return;setAnimatingWord({content:answer,start:bottomRect,end:topRect});setCurrentIndex(findEmptyIndex);setTimeout(()=>{setAnimatingWord(null);setAnswers(arrAnswers);},400);if(question.answers[+tempIndex]!==answer){// no idea what this is, but will move to handleNext function\n// handleNext happens when they press Next button and checks first if they are correct or not\n// therefore it is best to keep this function over there\n// handleAddMistake({\n//   mistake: `word ${answer} placed in gap ${+tempIndex + 1}`,\n// });\n}}function removeAnswer(index,trackIndex,word){var _topGapRefs$current$t;const findWord=answers.find((word,i)=>{return i===index&&typeof word===\"string\";});if(!findWord){setCurrentIndex(index);return;}const tempSpeechArray=speechArray.map((word,i,arr)=>{if(i===trackIndex){return\"%//gap//%\";}else{return word;}});setSpeechArray(tempSpeechArray);const tempAnswers=[...answers].map((el,i)=>i===index?false:el);const findEmptyIndex=tempAnswers.findIndex(word=>word===false);if(findEmptyIndex!==-1){setCurrentIndex(findEmptyIndex);}const topRect=(_topGapRefs$current$t=topGapRefs.current[trackIndex])===null||_topGapRefs$current$t===void 0?void 0:_topGapRefs$current$t.getBoundingClientRect();let bottomRect=null;if(findWord){var _bottomWordRefs$curre2;const findIndexBottomSide=question.data.findIndex(w=>w===findWord.trim());bottomRect=(_bottomWordRefs$curre2=bottomWordRefs.current[findIndexBottomSide])===null||_bottomWordRefs$curre2===void 0?void 0:_bottomWordRefs$curre2.getBoundingClientRect();}if(!bottomRect||!topRect)return;setAnimatingWord({content:findWord.trim(),start:topRect,end:bottomRect});setAnswers(tempAnswers);setTimeout(()=>{setAnimatingWord(null);},400);}const handleNext=()=>{if(answers.join(\"\").trim()===question.answers.join(\"\").trim()){handleNextQuestion();setReset(true);}else{setTryAgain(true);setEnabled(false);answers.forEach((answer,index)=>{handleAddMistake({mistake:`word ${answer} placed in gap ${index}`});});}};useEffect(()=>{if(reset){setTimeout(()=>{setEnabled(false);setAnswers([false,false]);const newSpeechArray=question.prompts[0].split(\"%\");const newSpeech=newSpeechArray.join(\"\").replace(/%\\/\\/|\\/\\/%/g,\"\");setSpeechArray(newSpeechArray);setSpeech(newSpeech);setCurrentIndex(0);setReset(false);},0);}},[reset]);useEffect(()=>{const updatedSpeech=speechArray.join(\"\").replace(/%\\/\\/|\\/\\/%/g,\"\");console.log(\"updatedSpeech\",updatedSpeech);setSpeech(updatedSpeech);},[speechArray]);useEffect(()=>{if(answers.length>0){if(answers.every(item=>typeof item===\"string\"&&item!==false)){setEnabled(true);}else{setEnabled(false);}}},[answers]);let fakeIndex=0;console.log(\"Wath\",element,\" Ok\");return/*#__PURE__*/_jsxs(\"div\",{id:\"complete_sentence\",className:\"flex flex-col h-full justify-between items-center\",onClick:()=>setSelector(\"#complete_sentence\"),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-16 px-2\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-3 text-base px-3 py-5 bg-gray-100\",children:[/*#__PURE__*/_jsx(TextToSpeech,{sentence:speech}),/*#__PURE__*/_jsx(\"div\",{className:\"m-0 items-center flex flex-row flex-wrap gap-y-3 gap-x-2 text-hightlight\",children:splitSentence.map((chunk,traceIndex,array)=>{if(chunk.startsWith(\"//\")&&chunk.endsWith(\"//\")){let index=fakeIndex;fakeIndex++;return/*#__PURE__*/_jsx(\"button\",{ref:el=>topGapRefs.current[traceIndex]=el,className:`${traceIndex===_allGapsIndex[currentIndex]&&\"border-hightlight\"}\n                        w-20 border-2 h-16 shadow-md rounded-md align-middle\n                    `,onClick:()=>removeAnswer(index,traceIndex,chunk),children:answers[index]},traceIndex+chunk);}else{return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"span\",{className:\"w-fit\",children:chunk},traceIndex)});}})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex gap-3 justify-center flex-wrap\",children:[question.data.map((option,i)=>/*#__PURE__*/_jsxs(\"button\",{onClick:()=>handleAnswerPicked(option,i),className:\"flex items-center gap-3\",children:[/*#__PURE__*/_jsx(TextToSpeech,{sentence:option},i),/*#__PURE__*/_jsx(\"span\",{ref:el=>bottomWordRefs.current[i]=el,className:\"text-hightlight font-semibold m-0 px-2 py-3 rounded-md shadow-md h-full\",children:option})]},i+option+Math.floor(Math.random()*5))),!enable&&animatingWord&&/*#__PURE__*/_jsx(AnimatedTag,{position:animatingWord}),!enable&&animatingWord&&/*#__PURE__*/_jsx(AnimatedTag,{position:animatingWord})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"w-full h-1/3 px-5\",children:/*#__PURE__*/_jsx(NextButtonRight,{isEnabled:enable,className:\"mt-28\",onClick:handleNext})}),tryAgain&&/*#__PURE__*/_jsx(ModalElement,{className:\"h-[44%]\",text:\"Try Again...\",onClose:()=>setTryAgain(false),closeLabel:\"Close\"})]});}export default QuestionCompleteSentence;","map":{"version":3,"names":["useEffect","useState","useRef","useGlobalContext","useExerciseData","TextToSpeech","NextButtonRight","ProgressBar","AnimatedTag","QuestionMarkSVG","ModalElement","jsx","_jsx","jsxs","_jsxs","QuestionCompleteSentence","_ref","question","setSelector","element","handleNextQuestion","handleAddMistake","topGapRefs","bottomWordRefs","answers","setAnswers","Array","from","currentIndex","setCurrentIndex","animatingWord","setAnimatingWord","enable","setEnabled","splitSentence","prompts","split","tryAgain","setTryAgain","_allGapsIndex","map","w","i","filter","speechArray","setSpeechArray","speech","setSpeech","reset","setReset","handleAnswerPicked","answer","index","_topGapRefs$current$g","_bottomWordRefs$curre","every","word","tempIndex","arrAnswers","el","tempGapIndex","tempSpeechArray","arr","findEmptyIndex","findIndex","gapIndex","topRect","current","getBoundingClientRect","bottomRect","content","start","end","setTimeout","removeAnswer","trackIndex","_topGapRefs$current$t","findWord","find","tempAnswers","_bottomWordRefs$curre2","findIndexBottomSide","data","trim","handleNext","join","forEach","mistake","newSpeechArray","newSpeech","replace","updatedSpeech","console","log","length","item","fakeIndex","id","className","onClick","children","sentence","chunk","traceIndex","array","startsWith","endsWith","ref","option","Math","floor","random","position","isEnabled","text","onClose","closeLabel"],"sources":["/home/samoore/tpd/new/src/components/QuestionCompleteSentence/QuestionCompleteSentence.js"],"sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\nimport { useGlobalContext } from \"../../Contexts/GlobalContext\";\r\nimport { useExerciseData } from \"../../Contexts/ExerciseContext\";\r\nimport TextToSpeech from \"../TextToSpeech/TextToSpeech\";\r\nimport NextButtonRight from \"../NextButtonRight/NextButtonRight\";\r\nimport ProgressBar from \"../ProgressBar/ProgressBar\";\r\nimport AnimatedTag from \"../AnimatedTag/AnimatedTag\";\r\nimport QuestionMarkSVG from \"../QuestionMarkSVG/QuestionMarkSVG\";\r\nimport ModalElement from \"../ModalElement/ModalElement\";\r\n\r\n// const question = {\r\n//   answers: ['because', \"done\", \"tasks\", \"the\"],\r\n//   data: ['tasks', \"the\", 'because', \"done\"],\r\n//   prompts: ['She felt happy %//gap//% she had %//gap//% all her %//gap//% before the end of %//gap//% day.'],\r\n//   question_id: 12,\r\n//   question_number: 1,\r\n//   question_type: \"complete_sentence\"\r\n// }\r\n\r\n// const question = {\r\n//   \"question_id\": \"1\",\r\n//   \"question_type\": \"complete-sentence\",\r\n//   \"prompts\": [\r\n//       \"The %//gap//% was walking to the %//gap//% when she saw a %//gap//% standing near her %//gap//%, so she decided to %//gap//% back.\"\r\n//   ],\r\n//   \"gaps\": 5,\r\n//   \"data\": [\r\n//       \"girl\",\r\n//       \"store\",\r\n//       \"bird\",\r\n//       \"home\",\r\n//       \"turn\"\r\n//   ],\r\n//   \"answers\": [\r\n//       \"girl\",\r\n//       \"store\",\r\n//       \"bird\",\r\n//       \"home\",\r\n//       \"turn\"\r\n//   ]\r\n// }\r\n\r\nfunction QuestionCompleteSentence({ question }) {\r\n  const { setSelector, element } = useGlobalContext();\r\n  const { handleNextQuestion, handleAddMistake } = useExerciseData();\r\n  const topGapRefs = useRef([]);\r\n  const bottomWordRefs = useRef([]);\r\n\r\n  const [answers, setAnswers] = useState(\r\n    Array.from(question.answers, () => false)\r\n  );\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [animatingWord, setAnimatingWord] = useState(null);\r\n  const [enable, setEnabled] = useState(false);\r\n  const splitSentence = question.prompts[0].split(\"%\");\r\n  const [tryAgain, setTryAgain] = useState(false);\r\n  const _allGapsIndex = splitSentence\r\n    .map((w, i) => (w === \"//gap//\" ? i : null))\r\n    .filter((i) => i !== null);\r\n\r\n  const [speechArray, setSpeechArray] = useState(\r\n    question.prompts[0].split(\"%\")\r\n  );\r\n  const [speech, setSpeech] = useState(\"\");\r\n  const [reset, setReset] = useState(false);\r\n\r\n  function handleAnswerPicked(answer, index) {\r\n    if (answers.every((word) => typeof word === \"string\")) {\r\n      return;\r\n    }\r\n\r\n    let tempIndex = currentIndex;\r\n    const arrAnswers = answers.map((el, i) => {\r\n      if (i === tempIndex) {\r\n        return answer;\r\n      } else {\r\n        return el;\r\n      }\r\n    });\r\n\r\n    const tempGapIndex = _allGapsIndex[tempIndex];\r\n\r\n    const tempSpeechArray = speechArray.map((word, i, arr) => {\r\n      if (i === tempGapIndex) {\r\n        return answer;\r\n      } else {\r\n        return word;\r\n      }\r\n    });\r\n\r\n    setSpeechArray(tempSpeechArray);\r\n\r\n    const findEmptyIndex = arrAnswers.findIndex((word) => word === false);\r\n    const gapIndex = _allGapsIndex[tempIndex];\r\n    const topRect = topGapRefs.current[gapIndex]?.getBoundingClientRect();\r\n    const bottomRect = bottomWordRefs.current[index]?.getBoundingClientRect();\r\n\r\n    if (!bottomRect || !topRect) return;\r\n\r\n    setAnimatingWord({\r\n      content: answer,\r\n      start: bottomRect,\r\n      end: topRect,\r\n    });\r\n\r\n    setCurrentIndex(findEmptyIndex);\r\n    setTimeout(() => {\r\n      setAnimatingWord(null);\r\n      setAnswers(arrAnswers);\r\n    }, 400);\r\n\r\n    if (question.answers[+tempIndex] !== answer) {\r\n      // no idea what this is, but will move to handleNext function\r\n      // handleNext happens when they press Next button and checks first if they are correct or not\r\n      // therefore it is best to keep this function over there\r\n      // handleAddMistake({\r\n      //   mistake: `word ${answer} placed in gap ${+tempIndex + 1}`,\r\n      // });\r\n    }\r\n  }\r\n\r\n  function removeAnswer(index, trackIndex, word) {\r\n    const findWord = answers.find((word, i) => {\r\n      return i === index && typeof word === \"string\";\r\n    });\r\n\r\n    if (!findWord) {\r\n      setCurrentIndex(index);\r\n      return;\r\n    }\r\n\r\n    const tempSpeechArray = speechArray.map((word, i, arr) => {\r\n      if (i === trackIndex) {\r\n        return \"%//gap//%\";\r\n      } else {\r\n        return word;\r\n      }\r\n    });\r\n\r\n    setSpeechArray(tempSpeechArray);\r\n\r\n    const tempAnswers = [...answers].map((el, i) => (i === index ? false : el));\r\n\r\n    const findEmptyIndex = tempAnswers.findIndex((word) => word === false);\r\n\r\n    if (findEmptyIndex !== -1) {\r\n      setCurrentIndex(findEmptyIndex);\r\n    }\r\n\r\n    const topRect = topGapRefs.current[trackIndex]?.getBoundingClientRect();\r\n    let bottomRect = null;\r\n    if (findWord) {\r\n      const findIndexBottomSide = question.data.findIndex(\r\n        (w) => w === findWord.trim()\r\n      );\r\n      bottomRect =\r\n        bottomWordRefs.current[findIndexBottomSide]?.getBoundingClientRect();\r\n    }\r\n\r\n    if (!bottomRect || !topRect) return;\r\n\r\n    setAnimatingWord({\r\n      content: findWord.trim(),\r\n      start: topRect,\r\n      end: bottomRect,\r\n    });\r\n    setAnswers(tempAnswers);\r\n\r\n    setTimeout(() => {\r\n      setAnimatingWord(null);\r\n    }, 400);\r\n  }\r\n\r\n  const handleNext = () => {\r\n    if (answers.join(\"\").trim() === question.answers.join(\"\").trim()) {\r\n      handleNextQuestion();\r\n      setReset(true);\r\n    } else {\r\n      setTryAgain(true);\r\n      setEnabled(false);\r\n      answers.forEach((answer, index) => {\r\n        handleAddMistake({\r\n          mistake: `word ${answer} placed in gap ${index}`,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (reset) {\r\n      setTimeout(() => {\r\n        setEnabled(false);\r\n        setAnswers([false, false]);\r\n        const newSpeechArray = question.prompts[0].split(\"%\");\r\n        const newSpeech = newSpeechArray.join(\"\").replace(/%\\/\\/|\\/\\/%/g, \"\");\r\n        setSpeechArray(newSpeechArray);\r\n        setSpeech(newSpeech);\r\n        setCurrentIndex(0);\r\n        setReset(false);\r\n      }, 0);\r\n    }\r\n  }, [reset]);\r\n\r\n  useEffect(() => {\r\n    const updatedSpeech = speechArray.join(\"\").replace(/%\\/\\/|\\/\\/%/g, \"\");\r\n    console.log(\"updatedSpeech\", updatedSpeech);\r\n    setSpeech(updatedSpeech);\r\n  }, [speechArray]);\r\n\r\n  useEffect(() => {\r\n    if (answers.length > 0) {\r\n      if (answers.every((item) => typeof item === \"string\" && item !== false)) {\r\n        setEnabled(true);\r\n      } else {\r\n        setEnabled(false);\r\n      }\r\n    }\r\n  }, [answers]);\r\n\r\n  let fakeIndex = 0;\r\n\r\n  console.log(\"Wath\", element, \" Ok\");\r\n\r\n  return (\r\n    <div\r\n      id=\"complete_sentence\"\r\n      className=\"flex flex-col h-full justify-between items-center\"\r\n      onClick={() => setSelector(\"#complete_sentence\")}\r\n    >\r\n      {/* <div \r\n        style={{ backgroundColor: \"#8CB036\" }}\r\n        className=\"w-full grid grid-cols-[95%_5%] items-center gap-2 px-3 py-4\">\r\n        <ProgressBar />\r\n        <QuestionMarkSVG />\r\n      </div> */}\r\n      <div className=\"space-y-16 px-2\">\r\n        <div className=\"flex items-center gap-3 text-base px-3 py-5 bg-gray-100\">\r\n          <TextToSpeech sentence={speech} />\r\n          <div className=\"m-0 items-center flex flex-row flex-wrap gap-y-3 gap-x-2 text-hightlight\">\r\n            {splitSentence.map((chunk, traceIndex, array) => {\r\n              if (chunk.startsWith(\"//\") && chunk.endsWith(\"//\")) {\r\n                let index = fakeIndex;\r\n                fakeIndex++;\r\n                return (\r\n                  <button\r\n                    ref={(el) => (topGapRefs.current[traceIndex] = el)}\r\n                    key={traceIndex + chunk}\r\n                    className={`${\r\n                      traceIndex === _allGapsIndex[currentIndex] &&\r\n                      \"border-hightlight\"\r\n                    }\r\n                        w-20 border-2 h-16 shadow-md rounded-md align-middle\r\n                    `}\r\n                    onClick={() => removeAnswer(index, traceIndex, chunk)}\r\n                  >\r\n                    {answers[index]}\r\n                  </button>\r\n                );\r\n              } else {\r\n                return (\r\n                  <div>\r\n                    <span key={traceIndex} className=\"w-fit\">\r\n                      {chunk}\r\n                    </span>\r\n                  </div>\r\n                );\r\n              }\r\n            })}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex gap-3 justify-center flex-wrap\">\r\n          {question.data.map((option, i) => (\r\n            <button\r\n              key={i + option + Math.floor(Math.random() * 5)}\r\n              onClick={() => handleAnswerPicked(option, i)}\r\n              className=\"flex items-center gap-3\"\r\n            >\r\n              <TextToSpeech key={i} sentence={option} />\r\n              <span\r\n                ref={(el) => (bottomWordRefs.current[i] = el)}\r\n                className=\"text-hightlight font-semibold m-0 px-2 py-3 rounded-md shadow-md h-full\"\r\n              >\r\n                {option}\r\n              </span>\r\n            </button>\r\n          ))}\r\n          {!enable && animatingWord && <AnimatedTag position={animatingWord} />}\r\n\r\n          {!enable && animatingWord && <AnimatedTag position={animatingWord} />}\r\n        </div>\r\n      </div>\r\n      <div className=\"w-full h-1/3 px-5\">\r\n        <NextButtonRight\r\n          isEnabled={enable}\r\n          className={\"mt-28\"}\r\n          onClick={handleNext}\r\n        />\r\n      </div>\r\n\r\n      {tryAgain && (\r\n        <ModalElement\r\n          className={\"h-[44%]\"}\r\n          text={\"Try Again...\"}\r\n          onClose={() => setTryAgain(false)}\r\n          closeLabel={\"Close\"}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionCompleteSentence;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}