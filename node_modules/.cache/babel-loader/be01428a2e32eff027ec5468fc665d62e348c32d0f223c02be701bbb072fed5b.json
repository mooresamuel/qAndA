{"ast":null,"code":"import{useEffect,useRef,useState}from\"react\";import{wordScoresAPI}from\"../services/wordScoresApi\";export function useSpeechToText(text){const[isRecording,setIsRecording]=useState(false);const[audioUrl,setAudioUrl]=useState(null);const[result,setResult]=useState(\"\");const[isLoading,setIsLoading]=useState(false);const[isStreamReady,setIsStreamReady]=useState(false);const[error,setError]=useState(null);const mediaStreamRef=useRef(null);const mediaRecorderRef=useRef(null);const audioChunksRef=useRef([]);const audioElementRef=useRef(null);useEffect(()=>{initAudioStream();return()=>{cleanupAudioStream();if(audioUrl){URL.revokeObjectURL(audioUrl);}};},[]);const initAudioStream=async()=>{try{console.log(\"Requesting microphone access...\");const stream=await navigator.mediaDevices.getUserMedia({audio:{channelCount:1,sampleRate:16000}});console.log(\"Microphone access granted\");mediaStreamRef.current=stream;// Check available MIME types\nconst mimeType=MediaRecorder.isTypeSupported(\"audio/webm\")?\"audio/webm\":MediaRecorder.isTypeSupported(\"audio/mp4\")?\"audio/mp4\":\"audio/ogg\";console.log(\"Using MIME type:\",mimeType);mediaRecorderRef.current=new MediaRecorder(stream,{mimeType:mimeType});mediaRecorderRef.current.ondataavailable=event=>{console.log(\"Data available:\",event.data.size,\"bytes\");if(event.data.size>0){audioChunksRef.current.push(event.data);}};mediaRecorderRef.current.onstart=()=>{console.log(\"Recording started\");audioChunksRef.current=[];};mediaRecorderRef.current.onstop=async()=>{console.log(\"Recording stopped, processing chunks...\");const audioBlob=new Blob(audioChunksRef.current,{type:mimeType});console.log(\"Created blob of size:\",audioBlob.size,\"bytes\");if(audioUrl){URL.revokeObjectURL(audioUrl);}const url=URL.createObjectURL(audioBlob);setAudioUrl(url);await sendRecording(url);if(audioElementRef.current){audioElementRef.current.load();}};mediaRecorderRef.current.onerror=event=>{console.error(\"MediaRecorder error:\",event.error);setError(\"Recording error: \"+event.error.message);};setIsStreamReady(true);setError(null);}catch(error){console.error(\"Error initializing audio stream:\",error);setError(\"Error accessing microphone: \"+error.message);setIsStreamReady(false);}};const cleanupAudioStream=()=>{console.log(\"Cleaning up audio stream...\");if(mediaRecorderRef.current&&isRecording){mediaRecorderRef.current.stop();}if(mediaStreamRef.current){mediaStreamRef.current.getTracks().forEach(track=>{track.stop();console.log(\"Track stopped:\",track.kind);});}if(audioUrl){URL.revokeObjectURL(audioUrl);}setIsStreamReady(false);setAudioUrl(null);setIsRecording(false);console.log(\"Cleanup complete\");};const startRecording=async()=>{try{if(!isStreamReady){await initAudioStream();}if(!mediaRecorderRef.current||mediaRecorderRef.current.state===\"inactive\"){console.log(\"Starting recording...\");audioChunksRef.current=[];mediaRecorderRef.current.start(1000);// Collect data every second\nsetIsRecording(true);setError(null);}}catch(error){console.error(\"Error starting recording:\",error);setError(\"Error starting recording: \"+error.message);}};const stopRecording=async()=>{try{if(mediaRecorderRef.current&&mediaRecorderRef.current.state!==\"inactive\"){console.log(\"Stopping recording...\");mediaRecorderRef.current.stop();setIsRecording(false);}}catch(error){console.error(\"Error stopping recording:\",error);setError(\"Error stopping recording: \"+error.message);}};const sendRecording=async url=>{if(!audioUrl&&!url){// || !phrase) {\nsetError(\"Please record audio and enter a phrase first\");return;}setIsLoading(true);try{const response=await fetch(audioUrl||url);const audioBlob=await response.blob();console.log(\"Sending blob of size:\",audioBlob.size,\"bytes\");const formData=new FormData();formData.append(\"audio\",audioBlob,\"recording.webm\");formData.append(\"phrase\",text);console.log(\"recording being sent\");const data=await wordScoresAPI(formData);setResult(data);console.log(\"Result:\",data);setError(null);}catch(error){console.error(\"Error sending recording:\",error);setError(\"Error sending recording: \"+error.message);}finally{setIsLoading(false);}};return{isRecording,isLoading,result,error,startRecording,stopRecording,sendRecording};}","map":{"version":3,"names":["useEffect","useRef","useState","wordScoresAPI","useSpeechToText","text","isRecording","setIsRecording","audioUrl","setAudioUrl","result","setResult","isLoading","setIsLoading","isStreamReady","setIsStreamReady","error","setError","mediaStreamRef","mediaRecorderRef","audioChunksRef","audioElementRef","initAudioStream","cleanupAudioStream","URL","revokeObjectURL","console","log","stream","navigator","mediaDevices","getUserMedia","audio","channelCount","sampleRate","current","mimeType","MediaRecorder","isTypeSupported","ondataavailable","event","data","size","push","onstart","onstop","audioBlob","Blob","type","url","createObjectURL","sendRecording","load","onerror","message","stop","getTracks","forEach","track","kind","startRecording","state","start","stopRecording","response","fetch","blob","formData","FormData","append"],"sources":["/home/samoore/tpd/new/src/hooks/useSpeechToText.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport { wordScoresAPI } from \"../services/wordScoresApi\";\r\n\r\nexport function useSpeechToText(text) {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [audioUrl, setAudioUrl] = useState(null);\r\n  const [result, setResult] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isStreamReady, setIsStreamReady] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const mediaStreamRef = useRef(null);\r\n  const mediaRecorderRef = useRef(null);\r\n  const audioChunksRef = useRef([]);\r\n  const audioElementRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    initAudioStream();\r\n    return () => {\r\n      cleanupAudioStream();\r\n      if (audioUrl) {\r\n        URL.revokeObjectURL(audioUrl);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const initAudioStream = async () => {\r\n    try {\r\n      console.log(\"Requesting microphone access...\");\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        audio: {\r\n          channelCount: 1,\r\n          sampleRate: 16000,\r\n        },\r\n      });\r\n      console.log(\"Microphone access granted\");\r\n\r\n      mediaStreamRef.current = stream;\r\n\r\n      // Check available MIME types\r\n      const mimeType = MediaRecorder.isTypeSupported(\"audio/webm\")\r\n        ? \"audio/webm\"\r\n        : MediaRecorder.isTypeSupported(\"audio/mp4\")\r\n        ? \"audio/mp4\"\r\n        : \"audio/ogg\";\r\n\r\n      console.log(\"Using MIME type:\", mimeType);\r\n\r\n      mediaRecorderRef.current = new MediaRecorder(stream, {\r\n        mimeType: mimeType,\r\n      });\r\n\r\n      mediaRecorderRef.current.ondataavailable = (event) => {\r\n        console.log(\"Data available:\", event.data.size, \"bytes\");\r\n        if (event.data.size > 0) {\r\n          audioChunksRef.current.push(event.data);\r\n        }\r\n      };\r\n\r\n      mediaRecorderRef.current.onstart = () => {\r\n        console.log(\"Recording started\");\r\n        audioChunksRef.current = [];\r\n      };\r\n\r\n      mediaRecorderRef.current.onstop = async () => {\r\n        console.log(\"Recording stopped, processing chunks...\");\r\n        const audioBlob = new Blob(audioChunksRef.current, { type: mimeType });\r\n        console.log(\"Created blob of size:\", audioBlob.size, \"bytes\");\r\n\r\n        if (audioUrl) {\r\n          URL.revokeObjectURL(audioUrl);\r\n        }\r\n\r\n        const url = URL.createObjectURL(audioBlob);\r\n        setAudioUrl(url);\r\n        await sendRecording(url);\r\n\r\n        if (audioElementRef.current) {\r\n          audioElementRef.current.load();\r\n        }\r\n      };\r\n\r\n      mediaRecorderRef.current.onerror = (event) => {\r\n        console.error(\"MediaRecorder error:\", event.error);\r\n        setError(\"Recording error: \" + event.error.message);\r\n      };\r\n\r\n      setIsStreamReady(true);\r\n      setError(null);\r\n    } catch (error) {\r\n      console.error(\"Error initializing audio stream:\", error);\r\n      setError(\"Error accessing microphone: \" + error.message);\r\n      setIsStreamReady(false);\r\n    }\r\n  };\r\n\r\n  const cleanupAudioStream = () => {\r\n    console.log(\"Cleaning up audio stream...\");\r\n    if (mediaRecorderRef.current && isRecording) {\r\n      mediaRecorderRef.current.stop();\r\n    }\r\n    if (mediaStreamRef.current) {\r\n      mediaStreamRef.current.getTracks().forEach((track) => {\r\n        track.stop();\r\n        console.log(\"Track stopped:\", track.kind);\r\n      });\r\n    }\r\n    if (audioUrl) {\r\n      URL.revokeObjectURL(audioUrl);\r\n    }\r\n    setIsStreamReady(false);\r\n    setAudioUrl(null);\r\n    setIsRecording(false);\r\n    console.log(\"Cleanup complete\");\r\n  };\r\n\r\n  const startRecording = async () => {\r\n    try {\r\n      if (!isStreamReady) {\r\n        await initAudioStream();\r\n      }\r\n\r\n      if (\r\n        !mediaRecorderRef.current ||\r\n        mediaRecorderRef.current.state === \"inactive\"\r\n      ) {\r\n        console.log(\"Starting recording...\");\r\n        audioChunksRef.current = [];\r\n        mediaRecorderRef.current.start(1000); // Collect data every second\r\n        setIsRecording(true);\r\n        setError(null);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error starting recording:\", error);\r\n      setError(\"Error starting recording: \" + error.message);\r\n    }\r\n  };\r\n\r\n  const stopRecording = async () => {\r\n    try {\r\n      if (\r\n        mediaRecorderRef.current &&\r\n        mediaRecorderRef.current.state !== \"inactive\"\r\n      ) {\r\n        console.log(\"Stopping recording...\");\r\n        mediaRecorderRef.current.stop();\r\n        setIsRecording(false);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error stopping recording:\", error);\r\n      setError(\"Error stopping recording: \" + error.message);\r\n    }\r\n  };\r\n\r\n  const sendRecording = async (url) => {\r\n    if (!audioUrl && !url) {\r\n      // || !phrase) {\r\n      setError(\"Please record audio and enter a phrase first\");\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(audioUrl || url);\r\n      const audioBlob = await response.blob();\r\n      console.log(\"Sending blob of size:\", audioBlob.size, \"bytes\");\r\n\r\n      const formData = new FormData();\r\n      formData.append(\"audio\", audioBlob, \"recording.webm\");\r\n      formData.append(\"phrase\", text);\r\n      console.log(\"recording being sent\");\r\n      const data = await wordScoresAPI(formData);\r\n      setResult(data);\r\n      console.log(\"Result:\", data);\r\n      setError(null);\r\n    } catch (error) {\r\n      console.error(\"Error sending recording:\", error);\r\n      setError(\"Error sending recording: \" + error.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    isRecording,\r\n    isLoading,\r\n    result,\r\n    error,\r\n    startRecording,\r\n    stopRecording,\r\n    sendRecording,\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}