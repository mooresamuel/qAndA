{"ast":null,"code":"var _jsxFileName = \"/home/samoore/tpd/new/src/test/SentenceHint.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Mic, Square, Send } from \"lucide-react\";\nimport WordResults from \"../components/WordResults\";\nimport \"../components/WordScores.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordHint = ({\n  source\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioUrl, setAudioUrl] = useState(null);\n  const [phrase, setPhrase] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isStreamReady, setIsStreamReady] = useState(false);\n  const [error, setError] = useState(null);\n  const mediaStreamRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const audioElementRef = useRef(null);\n  useEffect(() => {\n    initAudioStream();\n    return () => {\n      cleanupAudioStream();\n      if (audioUrl) {\n        URL.revokeObjectURL(audioUrl);\n      }\n    };\n  }, []);\n  const initAudioStream = async () => {\n    try {\n      console.log(\"Requesting microphone access...\");\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          channelCount: 1,\n          sampleRate: 16000\n        }\n      });\n      console.log(\"Microphone access granted\");\n      mediaStreamRef.current = stream;\n\n      // Check available MIME types\n      const mimeType = MediaRecorder.isTypeSupported(\"audio/webm\") ? \"audio/webm\" : MediaRecorder.isTypeSupported(\"audio/mp4\") ? \"audio/mp4\" : \"audio/ogg\";\n      console.log(\"Using MIME type:\", mimeType);\n      mediaRecorderRef.current = new MediaRecorder(stream, {\n        mimeType: mimeType\n      });\n      mediaRecorderRef.current.ondataavailable = event => {\n        console.log(\"Data available:\", event.data.size, \"bytes\");\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorderRef.current.onstart = () => {\n        console.log(\"Recording started\");\n        audioChunksRef.current = [];\n      };\n      mediaRecorderRef.current.onstop = () => {\n        console.log(\"Recording stopped, processing chunks...\");\n        const audioBlob = new Blob(audioChunksRef.current, {\n          type: mimeType\n        });\n        console.log(\"Created blob of size:\", audioBlob.size, \"bytes\");\n        if (audioUrl) {\n          URL.revokeObjectURL(audioUrl);\n        }\n        const url = URL.createObjectURL(audioBlob);\n        setAudioUrl(url);\n        if (audioElementRef.current) {\n          audioElementRef.current.load();\n        }\n      };\n      mediaRecorderRef.current.onerror = event => {\n        console.error(\"MediaRecorder error:\", event.error);\n        setError(\"Recording error: \" + event.error.message);\n      };\n      setIsStreamReady(true);\n      setError(null);\n    } catch (error) {\n      console.error(\"Error initializing audio stream:\", error);\n      setError(\"Error accessing microphone: \" + error.message);\n      setIsStreamReady(false);\n    }\n  };\n  const cleanupAudioStream = () => {\n    console.log(\"Cleaning up audio stream...\");\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n    }\n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => {\n        track.stop();\n        console.log(\"Track stopped:\", track.kind);\n      });\n    }\n    if (audioUrl) {\n      URL.revokeObjectURL(audioUrl);\n    }\n    setIsStreamReady(false);\n    setAudioUrl(null);\n    setIsRecording(false);\n    console.log(\"Cleanup complete\");\n  };\n  const startRecording = async () => {\n    try {\n      if (!isStreamReady) {\n        await initAudioStream();\n      }\n      if (!mediaRecorderRef.current || mediaRecorderRef.current.state === \"inactive\") {\n        console.log(\"Starting recording...\");\n        audioChunksRef.current = [];\n        mediaRecorderRef.current.start(1000); // Collect data every second\n        setIsRecording(true);\n        setError(null);\n      }\n    } catch (error) {\n      console.error(\"Error starting recording:\", error);\n      setError(\"Error starting recording: \" + error.message);\n    }\n  };\n  const stopRecording = () => {\n    try {\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\n        console.log(\"Stopping recording...\");\n        mediaRecorderRef.current.stop();\n        setIsRecording(false);\n      }\n    } catch (error) {\n      console.error(\"Error stopping recording:\", error);\n      setError(\"Error stopping recording: \" + error.message);\n    }\n  };\n  const sendRecording = async () => {\n    if (!audioUrl || !phrase) {\n      setError(\"Please record audio and enter a phrase first\");\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const response = await fetch(audioUrl);\n      const audioBlob = await response.blob();\n      console.log(\"Sending blob of size:\", audioBlob.size, \"bytes\");\n      const formData = new FormData();\n      formData.append(\"audio\", audioBlob, \"recording.webm\");\n      formData.append(\"phrase\", phrase);\n      const apiResponse = await fetch(`${source}get_sentence`, {\n        method: \"POST\",\n        body: formData\n      });\n      if (!apiResponse.ok) {\n        throw new Error(`Server responded with ${apiResponse.status}`);\n      }\n      const data = await apiResponse.json();\n      console.log(data);\n      setResult(data);\n      setError(null);\n    } catch (error) {\n      console.error(\"Error sending recording:\", error);\n      setError(\"Error sending recording: \" + error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-2 max-w-full w-full\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full p-3\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"phrase\",\n        value: phrase,\n        onChange: e => setPhrase(e.target.value),\n        className: \"w-full p-0 border rounded w-100\",\n        placeholder: \"Enter the sentence to record. You will then be able to see the cofidence in the pronounciation of each word after sending the recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"audio-recorder\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-group\",\n        children: [!isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startRecording,\n          className: `record-button ${isLoading ? \"disabled\" : \"\"}`,\n          disabled: isLoading,\n          children: [/*#__PURE__*/_jsxDEV(Mic, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: isStreamReady ? \"Start Recording\" : \"Initializing...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopRecording,\n          className: \"stop-button\",\n          children: [/*#__PURE__*/_jsxDEV(Square, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Stop Recording\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendRecording,\n          className: `send-button ${!audioUrl || isLoading ? \"disabled\" : \"\"}`,\n          disabled: !audioUrl || isLoading,\n          children: [/*#__PURE__*/_jsxDEV(Send, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: isLoading ? \"Sending...\" : \"Send Recording\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 19\n      }, this), result && /*#__PURE__*/_jsxDEV(WordResults, {\n        result: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 20\n      }, this), !isStreamReady && !error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stream-status\",\n        children: \"Initializing audio stream...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n_s(WordHint, \"SOTTjFYn2Z9fUCzOpPlzMRSrGR4=\");\n_c = WordHint;\nexport default WordHint;\nvar _c;\n$RefreshReg$(_c, \"WordHint\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Mic","Square","Send","WordResults","jsxDEV","_jsxDEV","WordHint","source","_s","isRecording","setIsRecording","audioUrl","setAudioUrl","phrase","setPhrase","result","setResult","isLoading","setIsLoading","isStreamReady","setIsStreamReady","error","setError","mediaStreamRef","mediaRecorderRef","audioChunksRef","audioElementRef","initAudioStream","cleanupAudioStream","URL","revokeObjectURL","console","log","stream","navigator","mediaDevices","getUserMedia","audio","channelCount","sampleRate","current","mimeType","MediaRecorder","isTypeSupported","ondataavailable","event","data","size","push","onstart","onstop","audioBlob","Blob","type","url","createObjectURL","load","onerror","message","stop","getTracks","forEach","track","kind","startRecording","state","start","stopRecording","sendRecording","response","fetch","blob","formData","FormData","append","apiResponse","method","body","ok","Error","status","json","className","children","id","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/home/samoore/tpd/new/src/test/SentenceHint.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { Mic, Square, Send } from \"lucide-react\";\nimport WordResults from \"../components/WordResults\";\nimport \"../components/WordScores.css\";\nconst WordHint = ({ source }) => {\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioUrl, setAudioUrl] = useState(null);\n  const [phrase, setPhrase] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isStreamReady, setIsStreamReady] = useState(false);\n  const [error, setError] = useState(null);\n\n  const mediaStreamRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const audioElementRef = useRef(null);\n\n  useEffect(() => {\n    initAudioStream();\n    return () => {\n      cleanupAudioStream();\n      if (audioUrl) {\n        URL.revokeObjectURL(audioUrl);\n      }\n    };\n  }, []);\n\n  const initAudioStream = async () => {\n    try {\n      console.log(\"Requesting microphone access...\");\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          channelCount: 1,\n          sampleRate: 16000,\n        },\n      });\n      console.log(\"Microphone access granted\");\n\n      mediaStreamRef.current = stream;\n\n      // Check available MIME types\n      const mimeType = MediaRecorder.isTypeSupported(\"audio/webm\")\n        ? \"audio/webm\"\n        : MediaRecorder.isTypeSupported(\"audio/mp4\")\n        ? \"audio/mp4\"\n        : \"audio/ogg\";\n\n      console.log(\"Using MIME type:\", mimeType);\n\n      mediaRecorderRef.current = new MediaRecorder(stream, {\n        mimeType: mimeType,\n      });\n\n      mediaRecorderRef.current.ondataavailable = (event) => {\n        console.log(\"Data available:\", event.data.size, \"bytes\");\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorderRef.current.onstart = () => {\n        console.log(\"Recording started\");\n        audioChunksRef.current = [];\n      };\n\n      mediaRecorderRef.current.onstop = () => {\n        console.log(\"Recording stopped, processing chunks...\");\n        const audioBlob = new Blob(audioChunksRef.current, { type: mimeType });\n        console.log(\"Created blob of size:\", audioBlob.size, \"bytes\");\n\n        if (audioUrl) {\n          URL.revokeObjectURL(audioUrl);\n        }\n\n        const url = URL.createObjectURL(audioBlob);\n        setAudioUrl(url);\n\n        if (audioElementRef.current) {\n          audioElementRef.current.load();\n        }\n      };\n\n      mediaRecorderRef.current.onerror = (event) => {\n        console.error(\"MediaRecorder error:\", event.error);\n        setError(\"Recording error: \" + event.error.message);\n      };\n\n      setIsStreamReady(true);\n      setError(null);\n    } catch (error) {\n      console.error(\"Error initializing audio stream:\", error);\n      setError(\"Error accessing microphone: \" + error.message);\n      setIsStreamReady(false);\n    }\n  };\n\n  const cleanupAudioStream = () => {\n    console.log(\"Cleaning up audio stream...\");\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n    }\n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach((track) => {\n        track.stop();\n        console.log(\"Track stopped:\", track.kind);\n      });\n    }\n    if (audioUrl) {\n      URL.revokeObjectURL(audioUrl);\n    }\n    setIsStreamReady(false);\n    setAudioUrl(null);\n    setIsRecording(false);\n    console.log(\"Cleanup complete\");\n  };\n\n  const startRecording = async () => {\n    try {\n      if (!isStreamReady) {\n        await initAudioStream();\n      }\n\n      if (\n        !mediaRecorderRef.current ||\n        mediaRecorderRef.current.state === \"inactive\"\n      ) {\n        console.log(\"Starting recording...\");\n        audioChunksRef.current = [];\n        mediaRecorderRef.current.start(1000); // Collect data every second\n        setIsRecording(true);\n        setError(null);\n      }\n    } catch (error) {\n      console.error(\"Error starting recording:\", error);\n      setError(\"Error starting recording: \" + error.message);\n    }\n  };\n\n  const stopRecording = () => {\n    try {\n      if (\n        mediaRecorderRef.current &&\n        mediaRecorderRef.current.state !== \"inactive\"\n      ) {\n        console.log(\"Stopping recording...\");\n        mediaRecorderRef.current.stop();\n        setIsRecording(false);\n      }\n    } catch (error) {\n      console.error(\"Error stopping recording:\", error);\n      setError(\"Error stopping recording: \" + error.message);\n    }\n  };\n\n  const sendRecording = async () => {\n    if (!audioUrl || !phrase) {\n      setError(\"Please record audio and enter a phrase first\");\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await fetch(audioUrl);\n      const audioBlob = await response.blob();\n      console.log(\"Sending blob of size:\", audioBlob.size, \"bytes\");\n\n      const formData = new FormData();\n      formData.append(\"audio\", audioBlob, \"recording.webm\");\n      formData.append(\"phrase\", phrase);\n\n      const apiResponse = await fetch(`${source}get_sentence`, {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!apiResponse.ok) {\n        throw new Error(`Server responded with ${apiResponse.status}`);\n      }\n\n      const data = await apiResponse.json();\n      console.log(data);\n      setResult(data);\n      setError(null);\n    } catch (error) {\n      console.error(\"Error sending recording:\", error);\n      setError(\"Error sending recording: \" + error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"p-2 max-w-full w-full\">\n      <div className=\"w-full p-3\">\n        {/* <label htmlFor=\"phrase\" className=\"block text-sm font-medium mb-2\">\n          Enter Word Hint\n        </label> */}\n        <textarea\n          id=\"phrase\"\n          value={phrase}\n          onChange={(e) => setPhrase(e.target.value)}\n          className=\"w-full p-0 border rounded w-100\"\n          placeholder=\"Enter the sentence to record. You will then be able to see the cofidence in the pronounciation of each word after sending the recording\"\n        />\n      </div>\n\n      <div className=\"audio-recorder\">\n        <div className=\"button-group\">\n          {!isRecording ? (\n            <button\n              onClick={startRecording}\n              className={`record-button ${isLoading ? \"disabled\" : \"\"}`}\n              disabled={isLoading}\n            >\n              <Mic size={20} />\n              <span>\n                {isStreamReady ? \"Start Recording\" : \"Initializing...\"}\n              </span>\n            </button>\n          ) : (\n            <button onClick={stopRecording} className=\"stop-button\">\n              <Square size={20} />\n              <span>Stop Recording</span>\n            </button>\n          )}\n\n          <button\n            onClick={sendRecording}\n            className={`send-button ${\n              !audioUrl || isLoading ? \"disabled\" : \"\"\n            }`}\n            disabled={!audioUrl || isLoading}\n          >\n            <Send size={20} />\n            <span>{isLoading ? \"Sending...\" : \"Send Recording\"}</span>\n          </button>\n        </div>\n\n        {/* {audioUrl && (\n        <div className=\"audio-player\">\n          <audio \n            ref={audioElementRef}\n            controls \n            src={audioUrl} \n            preload=\"metadata\"\n          />\n        </div>\n      )} */}\n\n        {error && <div className=\"error-message\">{error}</div>}\n\n        {result && <WordResults result={result} />}\n\n        {!isStreamReady && !error && (\n          <div className=\"stream-status\">Initializing audio stream...</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default WordHint;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,SAASC,GAAG,EAAEC,MAAM,EAAEC,IAAI,QAAQ,cAAc;AAChD,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAO,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACtC,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC/B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACgB,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACkB,MAAM,EAAEC,SAAS,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACsB,aAAa,EAAEC,gBAAgB,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACwB,KAAK,EAAEC,QAAQ,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAM0B,cAAc,GAAGzB,MAAM,CAAC,IAAI,CAAC;EACnC,MAAM0B,gBAAgB,GAAG1B,MAAM,CAAC,IAAI,CAAC;EACrC,MAAM2B,cAAc,GAAG3B,MAAM,CAAC,EAAE,CAAC;EACjC,MAAM4B,eAAe,GAAG5B,MAAM,CAAC,IAAI,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACd4B,eAAe,CAAC,CAAC;IACjB,OAAO,MAAM;MACXC,kBAAkB,CAAC,CAAC;MACpB,IAAIjB,QAAQ,EAAE;QACZkB,GAAG,CAACC,eAAe,CAACnB,QAAQ,CAAC;MAC/B;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMgB,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACFI,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAC9C,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QACvDC,KAAK,EAAE;UACLC,YAAY,EAAE,CAAC;UACfC,UAAU,EAAE;QACd;MACF,CAAC,CAAC;MACFR,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MAExCT,cAAc,CAACiB,OAAO,GAAGP,MAAM;;MAE/B;MACA,MAAMQ,QAAQ,GAAGC,aAAa,CAACC,eAAe,CAAC,YAAY,CAAC,GACxD,YAAY,GACZD,aAAa,CAACC,eAAe,CAAC,WAAW,CAAC,GAC1C,WAAW,GACX,WAAW;MAEfZ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAES,QAAQ,CAAC;MAEzCjB,gBAAgB,CAACgB,OAAO,GAAG,IAAIE,aAAa,CAACT,MAAM,EAAE;QACnDQ,QAAQ,EAAEA;MACZ,CAAC,CAAC;MAEFjB,gBAAgB,CAACgB,OAAO,CAACI,eAAe,GAAIC,KAAK,IAAK;QACpDd,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEa,KAAK,CAACC,IAAI,CAACC,IAAI,EAAE,OAAO,CAAC;QACxD,IAAIF,KAAK,CAACC,IAAI,CAACC,IAAI,GAAG,CAAC,EAAE;UACvBtB,cAAc,CAACe,OAAO,CAACQ,IAAI,CAACH,KAAK,CAACC,IAAI,CAAC;QACzC;MACF,CAAC;MAEDtB,gBAAgB,CAACgB,OAAO,CAACS,OAAO,GAAG,MAAM;QACvClB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;QAChCP,cAAc,CAACe,OAAO,GAAG,EAAE;MAC7B,CAAC;MAEDhB,gBAAgB,CAACgB,OAAO,CAACU,MAAM,GAAG,MAAM;QACtCnB,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;QACtD,MAAMmB,SAAS,GAAG,IAAIC,IAAI,CAAC3B,cAAc,CAACe,OAAO,EAAE;UAAEa,IAAI,EAAEZ;QAAS,CAAC,CAAC;QACtEV,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEmB,SAAS,CAACJ,IAAI,EAAE,OAAO,CAAC;QAE7D,IAAIpC,QAAQ,EAAE;UACZkB,GAAG,CAACC,eAAe,CAACnB,QAAQ,CAAC;QAC/B;QAEA,MAAM2C,GAAG,GAAGzB,GAAG,CAAC0B,eAAe,CAACJ,SAAS,CAAC;QAC1CvC,WAAW,CAAC0C,GAAG,CAAC;QAEhB,IAAI5B,eAAe,CAACc,OAAO,EAAE;UAC3Bd,eAAe,CAACc,OAAO,CAACgB,IAAI,CAAC,CAAC;QAChC;MACF,CAAC;MAEDhC,gBAAgB,CAACgB,OAAO,CAACiB,OAAO,GAAIZ,KAAK,IAAK;QAC5Cd,OAAO,CAACV,KAAK,CAAC,sBAAsB,EAAEwB,KAAK,CAACxB,KAAK,CAAC;QAClDC,QAAQ,CAAC,mBAAmB,GAAGuB,KAAK,CAACxB,KAAK,CAACqC,OAAO,CAAC;MACrD,CAAC;MAEDtC,gBAAgB,CAAC,IAAI,CAAC;MACtBE,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdU,OAAO,CAACV,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxDC,QAAQ,CAAC,8BAA8B,GAAGD,KAAK,CAACqC,OAAO,CAAC;MACxDtC,gBAAgB,CAAC,KAAK,CAAC;IACzB;EACF,CAAC;EAED,MAAMQ,kBAAkB,GAAGA,CAAA,KAAM;IAC/BG,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1C,IAAIR,gBAAgB,CAACgB,OAAO,IAAI/B,WAAW,EAAE;MAC3Ce,gBAAgB,CAACgB,OAAO,CAACmB,IAAI,CAAC,CAAC;IACjC;IACA,IAAIpC,cAAc,CAACiB,OAAO,EAAE;MAC1BjB,cAAc,CAACiB,OAAO,CAACoB,SAAS,CAAC,CAAC,CAACC,OAAO,CAAEC,KAAK,IAAK;QACpDA,KAAK,CAACH,IAAI,CAAC,CAAC;QACZ5B,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE8B,KAAK,CAACC,IAAI,CAAC;MAC3C,CAAC,CAAC;IACJ;IACA,IAAIpD,QAAQ,EAAE;MACZkB,GAAG,CAACC,eAAe,CAACnB,QAAQ,CAAC;IAC/B;IACAS,gBAAgB,CAAC,KAAK,CAAC;IACvBR,WAAW,CAAC,IAAI,CAAC;IACjBF,cAAc,CAAC,KAAK,CAAC;IACrBqB,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EACjC,CAAC;EAED,MAAMgC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,IAAI,CAAC7C,aAAa,EAAE;QAClB,MAAMQ,eAAe,CAAC,CAAC;MACzB;MAEA,IACE,CAACH,gBAAgB,CAACgB,OAAO,IACzBhB,gBAAgB,CAACgB,OAAO,CAACyB,KAAK,KAAK,UAAU,EAC7C;QACAlC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;QACpCP,cAAc,CAACe,OAAO,GAAG,EAAE;QAC3BhB,gBAAgB,CAACgB,OAAO,CAAC0B,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;QACtCxD,cAAc,CAAC,IAAI,CAAC;QACpBY,QAAQ,CAAC,IAAI,CAAC;MAChB;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdU,OAAO,CAACV,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDC,QAAQ,CAAC,4BAA4B,GAAGD,KAAK,CAACqC,OAAO,CAAC;IACxD;EACF,CAAC;EAED,MAAMS,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI;MACF,IACE3C,gBAAgB,CAACgB,OAAO,IACxBhB,gBAAgB,CAACgB,OAAO,CAACyB,KAAK,KAAK,UAAU,EAC7C;QACAlC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;QACpCR,gBAAgB,CAACgB,OAAO,CAACmB,IAAI,CAAC,CAAC;QAC/BjD,cAAc,CAAC,KAAK,CAAC;MACvB;IACF,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdU,OAAO,CAACV,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDC,QAAQ,CAAC,4BAA4B,GAAGD,KAAK,CAACqC,OAAO,CAAC;IACxD;EACF,CAAC;EAED,MAAMU,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAACzD,QAAQ,IAAI,CAACE,MAAM,EAAE;MACxBS,QAAQ,CAAC,8CAA8C,CAAC;MACxD;IACF;IAEAJ,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF,MAAMmD,QAAQ,GAAG,MAAMC,KAAK,CAAC3D,QAAQ,CAAC;MACtC,MAAMwC,SAAS,GAAG,MAAMkB,QAAQ,CAACE,IAAI,CAAC,CAAC;MACvCxC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEmB,SAAS,CAACJ,IAAI,EAAE,OAAO,CAAC;MAE7D,MAAMyB,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEvB,SAAS,EAAE,gBAAgB,CAAC;MACrDqB,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAE7D,MAAM,CAAC;MAEjC,MAAM8D,WAAW,GAAG,MAAML,KAAK,CAAC,GAAG/D,MAAM,cAAc,EAAE;QACvDqE,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEL;MACR,CAAC,CAAC;MAEF,IAAI,CAACG,WAAW,CAACG,EAAE,EAAE;QACnB,MAAM,IAAIC,KAAK,CAAC,yBAAyBJ,WAAW,CAACK,MAAM,EAAE,CAAC;MAChE;MAEA,MAAMlC,IAAI,GAAG,MAAM6B,WAAW,CAACM,IAAI,CAAC,CAAC;MACrClD,OAAO,CAACC,GAAG,CAACc,IAAI,CAAC;MACjB9B,SAAS,CAAC8B,IAAI,CAAC;MACfxB,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdU,OAAO,CAACV,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDC,QAAQ,CAAC,2BAA2B,GAAGD,KAAK,CAACqC,OAAO,CAAC;IACvD,CAAC,SAAS;MACRxC,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,oBACEb,OAAA;IAAK6E,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBACpC9E,OAAA;MAAK6E,SAAS,EAAC,YAAY;MAAAC,QAAA,eAIzB9E,OAAA;QACE+E,EAAE,EAAC,QAAQ;QACXC,KAAK,EAAExE,MAAO;QACdyE,QAAQ,EAAGC,CAAC,IAAKzE,SAAS,CAACyE,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC3CH,SAAS,EAAC,iCAAiC;QAC3CO,WAAW,EAAC;MAAyI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENxF,OAAA;MAAK6E,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7B9E,OAAA;QAAK6E,SAAS,EAAC,cAAc;QAAAC,QAAA,GAC1B,CAAC1E,WAAW,gBACXJ,OAAA;UACEyF,OAAO,EAAE9B,cAAe;UACxBkB,SAAS,EAAE,iBAAiBjE,SAAS,GAAG,UAAU,GAAG,EAAE,EAAG;UAC1D8E,QAAQ,EAAE9E,SAAU;UAAAkE,QAAA,gBAEpB9E,OAAA,CAACL,GAAG;YAAC+C,IAAI,EAAE;UAAG;YAAA2C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACjBxF,OAAA;YAAA8E,QAAA,EACGhE,aAAa,GAAG,iBAAiB,GAAG;UAAiB;YAAAuE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,gBAETxF,OAAA;UAAQyF,OAAO,EAAE3B,aAAc;UAACe,SAAS,EAAC,aAAa;UAAAC,QAAA,gBACrD9E,OAAA,CAACJ,MAAM;YAAC8C,IAAI,EAAE;UAAG;YAAA2C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACpBxF,OAAA;YAAA8E,QAAA,EAAM;UAAc;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CACT,eAEDxF,OAAA;UACEyF,OAAO,EAAE1B,aAAc;UACvBc,SAAS,EAAE,eACT,CAACvE,QAAQ,IAAIM,SAAS,GAAG,UAAU,GAAG,EAAE,EACvC;UACH8E,QAAQ,EAAE,CAACpF,QAAQ,IAAIM,SAAU;UAAAkE,QAAA,gBAEjC9E,OAAA,CAACH,IAAI;YAAC6C,IAAI,EAAE;UAAG;YAAA2C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAClBxF,OAAA;YAAA8E,QAAA,EAAOlE,SAAS,GAAG,YAAY,GAAG;UAAgB;YAAAyE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,EAaLxE,KAAK,iBAAIhB,OAAA;QAAK6E,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAE9D;MAAK;QAAAqE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EAErD9E,MAAM,iBAAIV,OAAA,CAACF,WAAW;QAACY,MAAM,EAAEA;MAAO;QAAA2E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAEzC,CAAC1E,aAAa,IAAI,CAACE,KAAK,iBACvBhB,OAAA;QAAK6E,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAC;MAA4B;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CACjE;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACrF,EAAA,CAhQIF,QAAQ;AAAA0F,EAAA,GAAR1F,QAAQ;AAkQd,eAAeA,QAAQ;AAAC,IAAA0F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}