{"ast":null,"code":"import React,{useState,useRef,useEffect}from'react';import{Mic,Square,Send}from'lucide-react';import WordResults from'../components/WordResults';import'../components/WordScores.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const WordHint=_ref=>{let{source}=_ref;const[isRecording,setIsRecording]=useState(false);const[audioUrl,setAudioUrl]=useState(null);const[phrase,setPhrase]=useState('');const[result,setResult]=useState('');const[isLoading,setIsLoading]=useState(false);const[isStreamReady,setIsStreamReady]=useState(false);const[error,setError]=useState(null);const mediaStreamRef=useRef(null);const mediaRecorderRef=useRef(null);const audioChunksRef=useRef([]);const audioElementRef=useRef(null);useEffect(()=>{initAudioStream();return()=>{cleanupAudioStream();if(audioUrl){URL.revokeObjectURL(audioUrl);}};},[]);const initAudioStream=async()=>{try{console.log('Requesting microphone access...');const stream=await navigator.mediaDevices.getUserMedia({audio:{channelCount:1,sampleRate:16000}});console.log('Microphone access granted');mediaStreamRef.current=stream;// Check available MIME types\nconst mimeType=MediaRecorder.isTypeSupported('audio/webm')?'audio/webm':MediaRecorder.isTypeSupported('audio/mp4')?'audio/mp4':'audio/ogg';console.log('Using MIME type:',mimeType);mediaRecorderRef.current=new MediaRecorder(stream,{mimeType:mimeType});mediaRecorderRef.current.ondataavailable=event=>{console.log('Data available:',event.data.size,'bytes');if(event.data.size>0){audioChunksRef.current.push(event.data);}};mediaRecorderRef.current.onstart=()=>{console.log('Recording started');audioChunksRef.current=[];};mediaRecorderRef.current.onstop=()=>{console.log('Recording stopped, processing chunks...');const audioBlob=new Blob(audioChunksRef.current,{type:mimeType});console.log('Created blob of size:',audioBlob.size,'bytes');if(audioUrl){URL.revokeObjectURL(audioUrl);}const url=URL.createObjectURL(audioBlob);setAudioUrl(url);if(audioElementRef.current){audioElementRef.current.load();}};mediaRecorderRef.current.onerror=event=>{console.error('MediaRecorder error:',event.error);setError('Recording error: '+event.error.message);};setIsStreamReady(true);setError(null);}catch(error){console.error('Error initializing audio stream:',error);setError('Error accessing microphone: '+error.message);setIsStreamReady(false);}};const cleanupAudioStream=()=>{console.log('Cleaning up audio stream...');if(mediaRecorderRef.current&&isRecording){mediaRecorderRef.current.stop();}if(mediaStreamRef.current){mediaStreamRef.current.getTracks().forEach(track=>{track.stop();console.log('Track stopped:',track.kind);});}if(audioUrl){URL.revokeObjectURL(audioUrl);}setIsStreamReady(false);setAudioUrl(null);setIsRecording(false);console.log('Cleanup complete');};const startRecording=async()=>{try{if(!isStreamReady){await initAudioStream();}if(!mediaRecorderRef.current||mediaRecorderRef.current.state==='inactive'){console.log('Starting recording...');audioChunksRef.current=[];mediaRecorderRef.current.start(1000);// Collect data every second\nsetIsRecording(true);setError(null);}}catch(error){console.error('Error starting recording:',error);setError('Error starting recording: '+error.message);}};const stopRecording=()=>{try{if(mediaRecorderRef.current&&mediaRecorderRef.current.state!=='inactive'){console.log('Stopping recording...');mediaRecorderRef.current.stop();setIsRecording(false);}}catch(error){console.error('Error stopping recording:',error);setError('Error stopping recording: '+error.message);}};const sendRecording=async()=>{if(!audioUrl||!phrase){setError('Please record audio and enter a phrase first');return;}setIsLoading(true);try{const response=await fetch(audioUrl);const audioBlob=await response.blob();console.log('Sending blob of size:',audioBlob.size,'bytes');const formData=new FormData();formData.append('audio',audioBlob,'recording.webm');formData.append('phrase',phrase);const apiResponse=await fetch(`${source}get_sentence`,{method:'POST',body:formData});if(!apiResponse.ok){throw new Error(`Server responded with ${apiResponse.status}`);}const data=await apiResponse.json();setResult(data);setError(null);}catch(error){console.error('Error sending recording:',error);setError('Error sending recording: '+error.message);}finally{setIsLoading(false);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"p-2 max-w-full w-full\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-full p-3\",children:/*#__PURE__*/_jsx(\"textarea\",{id:\"phrase\",value:phrase,onChange:e=>setPhrase(e.target.value),className:\"w-full p-0 border rounded w-100\",placeholder:\"Enter the sentence to record. You will then be able to see the cofidence in the pronounciation of each word after sending the recording\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"audio-recorder\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"button-group\",children:[!isRecording?/*#__PURE__*/_jsxs(\"button\",{onClick:startRecording,className:`record-button ${isLoading?'disabled':''}`,disabled:isLoading,children:[/*#__PURE__*/_jsx(Mic,{size:20}),/*#__PURE__*/_jsx(\"span\",{children:isStreamReady?'Start Recording':'Initializing...'})]}):/*#__PURE__*/_jsxs(\"button\",{onClick:stopRecording,className:\"stop-button\",children:[/*#__PURE__*/_jsx(Square,{size:20}),/*#__PURE__*/_jsx(\"span\",{children:\"Stop Recording\"})]}),/*#__PURE__*/_jsxs(\"button\",{onClick:sendRecording,className:`send-button ${!audioUrl||isLoading?'disabled':''}`,disabled:!audioUrl||isLoading,children:[/*#__PURE__*/_jsx(Send,{size:20}),/*#__PURE__*/_jsx(\"span\",{children:isLoading?'Sending...':'Send Recording'})]})]}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:error}),result&&/*#__PURE__*/_jsx(WordResults,{result:result}),!isStreamReady&&!error&&/*#__PURE__*/_jsx(\"div\",{className:\"stream-status\",children:\"Initializing audio stream...\"})]})]});};export default WordHint;","map":{"version":3,"names":["React","useState","useRef","useEffect","Mic","Square","Send","WordResults","jsx","_jsx","jsxs","_jsxs","WordHint","_ref","source","isRecording","setIsRecording","audioUrl","setAudioUrl","phrase","setPhrase","result","setResult","isLoading","setIsLoading","isStreamReady","setIsStreamReady","error","setError","mediaStreamRef","mediaRecorderRef","audioChunksRef","audioElementRef","initAudioStream","cleanupAudioStream","URL","revokeObjectURL","console","log","stream","navigator","mediaDevices","getUserMedia","audio","channelCount","sampleRate","current","mimeType","MediaRecorder","isTypeSupported","ondataavailable","event","data","size","push","onstart","onstop","audioBlob","Blob","type","url","createObjectURL","load","onerror","message","stop","getTracks","forEach","track","kind","startRecording","state","start","stopRecording","sendRecording","response","fetch","blob","formData","FormData","append","apiResponse","method","body","ok","Error","status","json","className","children","id","value","onChange","e","target","placeholder","onClick","disabled"],"sources":["/home/samoore/tpd/new/src/test/SentenceHint.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { Mic, Square, Send } from 'lucide-react';\nimport WordResults from '../components/WordResults';\nimport '../components/WordScores.css'\nconst WordHint = ({source}) => {\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioUrl, setAudioUrl] = useState(null);\n  const [phrase, setPhrase] = useState('');\n  const [result, setResult] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isStreamReady, setIsStreamReady] = useState(false);\n  const [error, setError] = useState(null);\n  \n  const mediaStreamRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const audioElementRef = useRef(null);\n\n  useEffect(() => {\n    initAudioStream();\n    return () => {\n      cleanupAudioStream();\n      if (audioUrl) {\n        URL.revokeObjectURL(audioUrl);\n      }\n    };\n  }, []);\n\n  const initAudioStream = async () => {\n    try {\n      console.log('Requesting microphone access...');\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          channelCount: 1,\n          sampleRate: 16000,\n        }\n      });\n      console.log('Microphone access granted');\n      \n      mediaStreamRef.current = stream;\n\n      // Check available MIME types\n      const mimeType = MediaRecorder.isTypeSupported('audio/webm')\n        ? 'audio/webm'\n        : MediaRecorder.isTypeSupported('audio/mp4')\n          ? 'audio/mp4'\n          : 'audio/ogg';\n      \n      console.log('Using MIME type:', mimeType);\n\n      mediaRecorderRef.current = new MediaRecorder(stream, {\n        mimeType: mimeType\n      });\n\n      mediaRecorderRef.current.ondataavailable = (event) => {\n        console.log('Data available:', event.data.size, 'bytes');\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorderRef.current.onstart = () => {\n        console.log('Recording started');\n        audioChunksRef.current = [];\n      };\n\n      mediaRecorderRef.current.onstop = () => {\n        console.log('Recording stopped, processing chunks...');\n        const audioBlob = new Blob(audioChunksRef.current, { type: mimeType });\n        console.log('Created blob of size:', audioBlob.size, 'bytes');\n        \n        if (audioUrl) {\n          URL.revokeObjectURL(audioUrl);\n        }\n        \n        const url = URL.createObjectURL(audioBlob);\n        setAudioUrl(url);\n        \n        if (audioElementRef.current) {\n          audioElementRef.current.load();\n        }\n      };\n\n      mediaRecorderRef.current.onerror = (event) => {\n        console.error('MediaRecorder error:', event.error);\n        setError('Recording error: ' + event.error.message);\n      };\n\n      setIsStreamReady(true);\n      setError(null);\n    } catch (error) {\n      console.error('Error initializing audio stream:', error);\n      setError('Error accessing microphone: ' + error.message);\n      setIsStreamReady(false);\n    }\n  };\n\n  const cleanupAudioStream = () => {\n    console.log('Cleaning up audio stream...');\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n    }\n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => {\n        track.stop();\n        console.log('Track stopped:', track.kind);\n      });\n    }\n    if (audioUrl) {\n      URL.revokeObjectURL(audioUrl);\n    }\n    setIsStreamReady(false);\n    setAudioUrl(null);\n    setIsRecording(false);\n    console.log('Cleanup complete');\n  };\n\n  const startRecording = async () => {\n    try {\n      if (!isStreamReady) {\n        await initAudioStream();\n      }\n\n      if (!mediaRecorderRef.current || mediaRecorderRef.current.state === 'inactive') {\n        console.log('Starting recording...');\n        audioChunksRef.current = [];\n        mediaRecorderRef.current.start(1000); // Collect data every second\n        setIsRecording(true);\n        setError(null);\n      }\n    } catch (error) {\n      console.error('Error starting recording:', error);\n      setError('Error starting recording: ' + error.message);\n    }\n  };\n\n  const stopRecording = () => {\n    try {\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n        console.log('Stopping recording...');\n        mediaRecorderRef.current.stop();\n        setIsRecording(false);\n      }\n    } catch (error) {\n      console.error('Error stopping recording:', error);\n      setError('Error stopping recording: ' + error.message);\n    }\n  };\n\n  const sendRecording = async () => {\n    if (!audioUrl || !phrase) {\n      setError('Please record audio and enter a phrase first');\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await fetch(audioUrl);\n      const audioBlob = await response.blob();\n      console.log('Sending blob of size:', audioBlob.size, 'bytes');\n\n      const formData = new FormData();\n      formData.append('audio', audioBlob, 'recording.webm');\n      formData.append('phrase', phrase);\n\n      const apiResponse = await fetch(`${source}get_sentence`, {\n        method: 'POST',\n        body: formData\n      });\n\n      if (!apiResponse.ok) {\n        throw new Error(`Server responded with ${apiResponse.status}`);\n      }\n\n      const data = await apiResponse.json();\n      setResult(data);\n      setError(null);\n    } catch (error) {\n      console.error('Error sending recording:', error);\n      setError('Error sending recording: ' + error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"p-2 max-w-full w-full\">\n      <div className=\"w-full p-3\">\n        {/* <label htmlFor=\"phrase\" className=\"block text-sm font-medium mb-2\">\n          Enter Word Hint\n        </label> */}\n        <textarea\n          id=\"phrase\"\n          value={phrase}\n          onChange={(e) => setPhrase(e.target.value)}\n          className=\"w-full p-0 border rounded w-100\"\n          placeholder=\"Enter the sentence to record. You will then be able to see the cofidence in the pronounciation of each word after sending the recording\"\n        />\n      </div>\n\n      <div className=\"audio-recorder\">\n      <div className=\"button-group\">\n        {!isRecording ? (\n          <button\n            onClick={startRecording}\n            className={`record-button ${isLoading ? 'disabled' : ''}`}\n            disabled={isLoading}\n          >\n            <Mic size={20} />\n            <span>{isStreamReady ? 'Start Recording' : 'Initializing...'}</span>\n          </button>\n        ) : (\n          <button\n            onClick={stopRecording}\n            className=\"stop-button\"\n          >\n            <Square size={20} />\n            <span>Stop Recording</span>\n          </button>\n        )}\n\n        <button\n          onClick={sendRecording}\n          className={`send-button ${(!audioUrl || isLoading) ? 'disabled' : ''}`}\n          disabled={!audioUrl || isLoading}\n        >\n          <Send size={20} />\n          <span>{isLoading ? 'Sending...' : 'Send Recording'}</span>\n        </button>\n      </div>\n\n      {/* {audioUrl && (\n        <div className=\"audio-player\">\n          <audio \n            ref={audioElementRef}\n            controls \n            src={audioUrl} \n            preload=\"metadata\"\n          />\n        </div>\n      )} */}\n\n      {error && (\n        <div className=\"error-message\">\n          {error}\n        </div>\n      )}\n\n      {result && <WordResults result={result} />}\n\n      {!isStreamReady && !error && (\n        <div className=\"stream-status\">\n          Initializing audio stream...\n        </div>\n      )}\n    </div>\n    </div>\n  );\n};\n\nexport default WordHint;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}