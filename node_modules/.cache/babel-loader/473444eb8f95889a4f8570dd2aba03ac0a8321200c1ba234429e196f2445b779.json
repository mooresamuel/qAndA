{"ast":null,"code":"var _jsxFileName = \"/home/samoore/tpd/new/src/components/QuestionCompleteSentence/QuestionCompleteSentence.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useExerciseData } from \"../../Contexts/ExerciseContext\";\nimport TextToSpeech from \"../TextToSpeech/TextToSpeech\";\nimport NextButtonRight from \"../NextButtonRight/NextButtonRight\";\nimport ProgressBar from \"../ProgressBar/ProgressBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuestionCompleteSentence({\n  question\n}) {\n  _s();\n  const {\n    handleNextQuestion,\n    handleAddMistake\n  } = useExerciseData();\n  const [answers, setAnswers] = useState(Array.from(question.answers, () => false));\n  const [correct, setCorrect] = useState(false);\n  const splitSentence = question.prompts[0].split(\"%\");\n  const correctSentence = question.prompts[0].replaceAll(\"%//\", \"\").replaceAll(\"//%\", \"\");\n  let currentIndex = 0;\n  function handleAnswerPicked(answer) {\n    let indexPlaced = false;\n    setAnswers(current => [...current].map((el, i) => {\n      if (indexPlaced) return el;\n      if (el === false) {\n        indexPlaced = `${i}`;\n        return answer;\n      } else {\n        return el;\n      }\n    }));\n    if (question.answers[+indexPlaced] !== answer) {\n      handleAddMistake({\n        mistake: `word ${answer} placed in gap ${+indexPlaced + 1}`\n      });\n    }\n  }\n  function removeAnswer(index) {\n    setAnswers(current => [...current].map((el, i) => i === index ? false : el));\n  }\n  useEffect(() => {\n    if (answers.length > 0) {\n      if ([...question.answers].sort().toString() === [...answers].sort().toString()) {\n        setCorrect(true);\n      } else {\n        setCorrect(false);\n      }\n    }\n  }, [answers]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-full justify-between items-center\",\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-16\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center gap-3 text-lg px-3 py-5 bg-gray-100\",\n        children: [/*#__PURE__*/_jsxDEV(TextToSpeech, {\n          sentence: correctSentence\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"m-0 align-middle text-hightlight\",\n          children: splitSentence.map((chunk, i) => {\n            if (chunk.startsWith(\"//\") && chunk.endsWith(\"//\")) {\n              let index = currentIndex; // prevent index to be incremented when onClick is called\n              currentIndex++;\n              return /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"w-20 border-2 h-16 border-hightlight shadow-md rounded-md align-middle\",\n                onClick: () => removeAnswer(index),\n                children: answers[index]\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 19\n              }, this);\n            } else {\n              return /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"align-middle\",\n                children: chunk\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 19\n              }, this);\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-3 justify-center\",\n        children: question.data.map((option, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswerPicked(option),\n          className: \"flex items-center gap-3\",\n          children: [/*#__PURE__*/_jsxDEV(TextToSpeech, {\n            sentence: option\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-hightlight font-semibold m-0 px-2 py-3 rounded-md shadow-md h-full\",\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NextButtonRight, {\n      isEnabled: correct,\n      className: \"mt-28\",\n      onClick: handleNextQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(QuestionCompleteSentence, \"NZm9xKTdD0Yuc51oYtIXBkByJKs=\", false, function () {\n  return [useExerciseData];\n});\n_c = QuestionCompleteSentence;\nexport default QuestionCompleteSentence;\nvar _c;\n$RefreshReg$(_c, \"QuestionCompleteSentence\");","map":{"version":3,"names":["useEffect","useState","useExerciseData","TextToSpeech","NextButtonRight","ProgressBar","jsxDEV","_jsxDEV","QuestionCompleteSentence","question","_s","handleNextQuestion","handleAddMistake","answers","setAnswers","Array","from","correct","setCorrect","splitSentence","prompts","split","correctSentence","replaceAll","currentIndex","handleAnswerPicked","answer","indexPlaced","current","map","el","i","mistake","removeAnswer","index","length","sort","toString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","sentence","chunk","startsWith","endsWith","onClick","data","option","isEnabled","_c","$RefreshReg$"],"sources":["/home/samoore/tpd/new/src/components/QuestionCompleteSentence/QuestionCompleteSentence.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useExerciseData } from \"../../Contexts/ExerciseContext\";\r\nimport TextToSpeech from \"../TextToSpeech/TextToSpeech\";\r\nimport NextButtonRight from \"../NextButtonRight/NextButtonRight\";\r\nimport ProgressBar from \"../ProgressBar/ProgressBar\";\r\n\r\nfunction QuestionCompleteSentence({ question }) {\r\n  const { handleNextQuestion, handleAddMistake } = useExerciseData();\r\n\r\n  const [answers, setAnswers] = useState(\r\n    Array.from(question.answers, () => false)\r\n  );\r\n  const [correct, setCorrect] = useState(false);\r\n  const splitSentence = question.prompts[0].split(\"%\");\r\n  const correctSentence = question.prompts[0]\r\n    .replaceAll(\"%//\", \"\")\r\n    .replaceAll(\"//%\", \"\");\r\n\r\n  let currentIndex = 0;\r\n\r\n  function handleAnswerPicked(answer) {\r\n    let indexPlaced = false;\r\n    setAnswers((current) =>\r\n      [...current].map((el, i) => {\r\n        if (indexPlaced) return el;\r\n        if (el === false) {\r\n          indexPlaced = `${i}`;\r\n          return answer;\r\n        } else {\r\n          return el;\r\n        }\r\n      })\r\n    );\r\n    if (question.answers[+indexPlaced] !== answer) {\r\n      handleAddMistake({\r\n        mistake: `word ${answer} placed in gap ${+indexPlaced + 1}`,\r\n      });\r\n    }\r\n  }\r\n\r\n  function removeAnswer(index) {\r\n    setAnswers((current) =>\r\n      [...current].map((el, i) => (i === index ? false : el))\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (answers.length > 0) {\r\n      if (\r\n        [...question.answers].sort().toString() ===\r\n        [...answers].sort().toString()\r\n      ) {\r\n        setCorrect(true);\r\n      } else {\r\n        setCorrect(false);\r\n      }\r\n    }\r\n  }, [answers]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-full justify-between items-center\">\r\n      <ProgressBar />\r\n      <div className=\"space-y-16\">\r\n        <div className=\"flex items-center gap-3 text-lg px-3 py-5 bg-gray-100\">\r\n          <TextToSpeech sentence={correctSentence} />\r\n          <p className=\"m-0 align-middle text-hightlight\">\r\n            {splitSentence.map((chunk, i) => {\r\n              if (chunk.startsWith(\"//\") && chunk.endsWith(\"//\")) {\r\n                let index = currentIndex; // prevent index to be incremented when onClick is called\r\n                currentIndex++;\r\n                return (\r\n                  <button\r\n                    key={i}\r\n                    className=\"w-20 border-2 h-16 border-hightlight shadow-md rounded-md align-middle\"\r\n                    onClick={() => removeAnswer(index)}\r\n                  >\r\n                    {answers[index]}\r\n                  </button>\r\n                );\r\n              } else {\r\n                return (\r\n                  <span key={i} className=\"align-middle\">\r\n                    {chunk}\r\n                  </span>\r\n                );\r\n              }\r\n            })}\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"flex gap-3 justify-center\">\r\n          {question.data.map((option, i) => (\r\n            <button\r\n              onClick={() => handleAnswerPicked(option)}\r\n              className=\"flex items-center gap-3\"\r\n            >\r\n              <TextToSpeech key={i} sentence={option} />\r\n              <p className=\"text-hightlight font-semibold m-0 px-2 py-3 rounded-md shadow-md h-full\">\r\n                {option}\r\n              </p>\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <NextButtonRight\r\n        isEnabled={correct}\r\n        className={\"mt-28\"}\r\n        onClick={handleNextQuestion}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionCompleteSentence;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}