{"ast":null,"code":"var _jsxFileName = \"/home/samoore/tpd/new/src/pages/ExerciseEntryPoint.js\",\n  _s = $RefreshSig$();\nimport QuestionCompleteSentence from \"../components/QuestionCompleteSentence/QuestionCompleteSentence\";\nimport QuestionReadSentence from \"../components/QuestionReadSentence/QuestionReadSentence\";\nimport QuestionRepeatWord from \"../components/QuestionRepeatWord/QuestionRepeatWord\";\nimport QuestionRepeatWords from \"../components/QuestionRepeatWords/QuestionRepeatWords\";\nimport QuestionFindingMatchingWords from \"../components/QuestionFindingMatchingWords/QuestionFindingMatchingWords\";\nimport QuestionVowelLength from \"../components/QuestionVowelLength/QuestionVowelLength\";\nimport { useExerciseData } from \"../Contexts/ExerciseContext\";\nimport Chat from \"../components/Chat/Chat\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ExerciseEntryPoint() {\n  _s();\n  const {\n    currentQuestion,\n    isLoading\n  } = useExerciseData();\n  if (isLoading) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [currentQuestion.question_type === \"repeat_words\" && /*#__PURE__*/_jsxDEV(QuestionRepeatWords, {\n      question: currentQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this), currentQuestion.question_type === \"repeat_word\" && /*#__PURE__*/_jsxDEV(QuestionRepeatWord, {\n      question: currentQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this), currentQuestion.question_type === \"repeat_sentence\" && /*#__PURE__*/_jsxDEV(QuestionReadSentence, {\n      question: currentQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this), currentQuestion.question_type === \"complete_sentence\" && /*#__PURE__*/_jsxDEV(QuestionCompleteSentence, {\n      question: currentQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this), currentQuestion.question_type === \"find_matching_words\" && /*#__PURE__*/_jsxDEV(QuestionFindingMatchingWords, {\n      question: currentQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), currentQuestion.question_type === \"vowel_length\" && /*#__PURE__*/_jsxDEV(QuestionVowelLength, {\n      question: currentQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Chat, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n\n  // if (currentQuestion.question_type === \"repeat_words\")\n  //   return <QuestionRepeatWords question={currentQuestion} />;\n\n  // if (currentQuestion.question_type === \"repeat_word\")\n  //   return <QuestionRepeatWord question={currentQuestion} />;\n\n  // if (currentQuestion.question_type === \"repeat_sentence\")\n  //   return <QuestionReadSentence question={currentQuestion} />;\n\n  // if (currentQuestion.question_type === \"complete_sentence\")\n  //   return <QuestionCompleteSentence question={currentQuestion} />;\n\n  // if (currentQuestion.question_type === \"find_matching_words\")\n  //   return <QuestionFindingMatchingWords question={currentQuestion} />;\n  // // currentLevel={0} totalLevel={5} should come from the \"API question\" to work with the ProgressBar component\n  // // you can name currentLevel totalLevel accordingly to the \"API question\"\n  // // Ideally currentLevel should be 0 and totalLevel the max amount stages the level contains\n\n  // if (currentQuestion.question_type === \"vowel_length\")\n  //   return <QuestionVowelLength question={currentQuestion} />;\n}\n_s(ExerciseEntryPoint, \"c/kRu7atmGTO6OKvGJSUD0G/Oh4=\", false, function () {\n  return [useExerciseData];\n});\n_c = ExerciseEntryPoint;\nexport default ExerciseEntryPoint;\nvar _c;\n$RefreshReg$(_c, \"ExerciseEntryPoint\");","map":{"version":3,"names":["QuestionCompleteSentence","QuestionReadSentence","QuestionRepeatWord","QuestionRepeatWords","QuestionFindingMatchingWords","QuestionVowelLength","useExerciseData","Chat","jsxDEV","_jsxDEV","Fragment","_Fragment","ExerciseEntryPoint","_s","currentQuestion","isLoading","children","question_type","question","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/samoore/tpd/new/src/pages/ExerciseEntryPoint.js"],"sourcesContent":["import QuestionCompleteSentence from \"../components/QuestionCompleteSentence/QuestionCompleteSentence\";\r\nimport QuestionReadSentence from \"../components/QuestionReadSentence/QuestionReadSentence\";\r\nimport QuestionRepeatWord from \"../components/QuestionRepeatWord/QuestionRepeatWord\";\r\nimport QuestionRepeatWords from \"../components/QuestionRepeatWords/QuestionRepeatWords\";\r\nimport QuestionFindingMatchingWords from \"../components/QuestionFindingMatchingWords/QuestionFindingMatchingWords\";\r\nimport QuestionVowelLength from \"../components/QuestionVowelLength/QuestionVowelLength\";\r\nimport { useExerciseData } from \"../Contexts/ExerciseContext\";\r\nimport Chat from \"../components/Chat/Chat\";\r\n\r\nfunction ExerciseEntryPoint() {\r\n  const { currentQuestion, isLoading } = useExerciseData();\r\n\r\n  if (isLoading) return null;\r\n\r\n  return (\r\n    <>\r\n      {currentQuestion.question_type === \"repeat_words\" && (\r\n        <QuestionRepeatWords question={currentQuestion} />\r\n      )}\r\n      {currentQuestion.question_type === \"repeat_word\" && (\r\n        <QuestionRepeatWord question={currentQuestion} />\r\n      )}\r\n      {currentQuestion.question_type === \"repeat_sentence\" && (\r\n        <QuestionReadSentence question={currentQuestion} />\r\n      )}\r\n      {currentQuestion.question_type === \"complete_sentence\" && (\r\n        <QuestionCompleteSentence question={currentQuestion} />\r\n      )}\r\n      {currentQuestion.question_type === \"find_matching_words\" && (\r\n        <QuestionFindingMatchingWords question={currentQuestion} />\r\n      )}\r\n      {currentQuestion.question_type === \"vowel_length\" && (\r\n        <QuestionVowelLength question={currentQuestion} />\r\n      )}\r\n      <Chat />\r\n    </>\r\n  );\r\n\r\n  // if (currentQuestion.question_type === \"repeat_words\")\r\n  //   return <QuestionRepeatWords question={currentQuestion} />;\r\n\r\n  // if (currentQuestion.question_type === \"repeat_word\")\r\n  //   return <QuestionRepeatWord question={currentQuestion} />;\r\n\r\n  // if (currentQuestion.question_type === \"repeat_sentence\")\r\n  //   return <QuestionReadSentence question={currentQuestion} />;\r\n\r\n  // if (currentQuestion.question_type === \"complete_sentence\")\r\n  //   return <QuestionCompleteSentence question={currentQuestion} />;\r\n\r\n  // if (currentQuestion.question_type === \"find_matching_words\")\r\n  //   return <QuestionFindingMatchingWords question={currentQuestion} />;\r\n  // // currentLevel={0} totalLevel={5} should come from the \"API question\" to work with the ProgressBar component\r\n  // // you can name currentLevel totalLevel accordingly to the \"API question\"\r\n  // // Ideally currentLevel should be 0 and totalLevel the max amount stages the level contains\r\n\r\n  // if (currentQuestion.question_type === \"vowel_length\")\r\n  //   return <QuestionVowelLength question={currentQuestion} />;\r\n}\r\n\r\nexport default ExerciseEntryPoint;\r\n"],"mappings":";;AAAA,OAAOA,wBAAwB,MAAM,iEAAiE;AACtG,OAAOC,oBAAoB,MAAM,yDAAyD;AAC1F,OAAOC,kBAAkB,MAAM,qDAAqD;AACpF,OAAOC,mBAAmB,MAAM,uDAAuD;AACvF,OAAOC,4BAA4B,MAAM,yEAAyE;AAClH,OAAOC,mBAAmB,MAAM,uDAAuD;AACvF,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,OAAOC,IAAI,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE3C,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM;IAAEC,eAAe;IAAEC;EAAU,CAAC,GAAGT,eAAe,CAAC,CAAC;EAExD,IAAIS,SAAS,EAAE,OAAO,IAAI;EAE1B,oBACEN,OAAA,CAAAE,SAAA;IAAAK,QAAA,GACGF,eAAe,CAACG,aAAa,KAAK,cAAc,iBAC/CR,OAAA,CAACN,mBAAmB;MAACe,QAAQ,EAAEJ;IAAgB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAClD,EACAR,eAAe,CAACG,aAAa,KAAK,aAAa,iBAC9CR,OAAA,CAACP,kBAAkB;MAACgB,QAAQ,EAAEJ;IAAgB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CACjD,EACAR,eAAe,CAACG,aAAa,KAAK,iBAAiB,iBAClDR,OAAA,CAACR,oBAAoB;MAACiB,QAAQ,EAAEJ;IAAgB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CACnD,EACAR,eAAe,CAACG,aAAa,KAAK,mBAAmB,iBACpDR,OAAA,CAACT,wBAAwB;MAACkB,QAAQ,EAAEJ;IAAgB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CACvD,EACAR,eAAe,CAACG,aAAa,KAAK,qBAAqB,iBACtDR,OAAA,CAACL,4BAA4B;MAACc,QAAQ,EAAEJ;IAAgB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAC3D,EACAR,eAAe,CAACG,aAAa,KAAK,cAAc,iBAC/CR,OAAA,CAACJ,mBAAmB;MAACa,QAAQ,EAAEJ;IAAgB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAClD,eACDb,OAAA,CAACF,IAAI;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACR,CAAC;;EAGL;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;AACF;AAACT,EAAA,CAjDQD,kBAAkB;EAAA,QACcN,eAAe;AAAA;AAAAiB,EAAA,GAD/CX,kBAAkB;AAmD3B,eAAeA,kBAAkB;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}