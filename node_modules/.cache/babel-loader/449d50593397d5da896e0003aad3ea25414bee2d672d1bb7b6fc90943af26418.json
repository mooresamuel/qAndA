{"ast":null,"code":"import{createContext,useContext,useEffect,useRef,useState}from\"react\";import{Outlet,useNavigate,useParams}from\"react-router-dom\";import{getExercise}from\"../services/getQuestionsAPI\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ExerciseContext=/*#__PURE__*/createContext();function ExerciseProvider(_ref){var _exercise$questions,_exercise$questions2;let{children}=_ref;const navigate=useNavigate();const{exercise_id}=useParams();const[withCoach,setWithCoach]=useState(false);const[exercise,setExercise]=useState([]);const[mistakes,setMistakes]=useState([]);const[isLoading,setIsLoading]=useState(true);const[questionIndex,setQuestionIndex]=useState(0);const[currentLevel,setCurrentLevel]=useState(0);// const [currentQuestion, setCurrentQuestion] = useState({});\nconst usedAiInExercise=useRef(false);const wordsMistaken=useRef(new Set());const currentQuestion=exercise===null||exercise===void 0?void 0:(_exercise$questions=exercise.questions)===null||_exercise$questions===void 0?void 0:_exercise$questions.at(questionIndex);const numQuestions=exercise===null||exercise===void 0?void 0:(_exercise$questions2=exercise.questions)===null||_exercise$questions2===void 0?void 0:_exercise$questions2.length;useEffect(function(){if(exercise){setMistakes(exercise);}},[exercise]);useEffect(function(){async function fetch(){try{setIsLoading(true);const data=await getExercise(exercise_id);setExercise(data);// setCurrentQuestion(data?.questions?.at(0));\n}catch(err){console.log(err);}finally{setIsLoading(false);}}fetch();},[exercise_id]);const resetMistakes=()=>{setMistakes(exercise);};const getMistakesCurrentQuestion=()=>{return{...mistakes,questions:mistakes.questions.filter(el=>el.question_id===currentQuestion.question_id)};};const handleMoveToNextQuestion=()=>{// console.log(\"HANDLENextquestion\");\nsetQuestionIndex(i=>i+1);// setCurrentQuestion(exercise.questions.at(questionIndex));\nreturn exercise.questions.at(questionIndex+1);};// const handleNextQuestion = () => {\n//   // handleAddMistake({ question_id: currentQuestion.question_id });\n//   usedAiInExercise.current = false;\n//   setCurrentLevel((level) => level + 1);\n//   if (questionIndex < numQuestions - 1) {\n//     const newIndex = questionIndex + 1;\n//     setQuestionIndex(newIndex);\n//     // setCurrentQuestion(exercise?.questions?.at(newIndex));\n//   }\n// };\n// const handleUseGeneratedQuestions = (generatedQuestions) => {\n//   setMistakes([]);\n//   setExercise((exercise) => {\n//     return { ...exercise, questions: [generatedQuestions] };\n//   });\n//   setQuestionIndex(0);\n//   // setCurrentQuestion(generatedQuestions);\n//   navigate(`/exercise/${exercise_id}/steps/ai_generated`);\n// };\nconst handleAddMistake=_ref2=>{let{mistake}=_ref2;wordsMistaken.current.add(mistake);const newMistakesArray={...mistakes,questions:mistakes.questions.map(question=>{if(mistake&&currentQuestion.question_id===question.question_id){const currentMistakes=question.mistakes?[...question.mistakes]:[];return{...question,mistakes:[...currentMistakes,mistake],used_Ai:usedAiInExercise.current};}else{return{...question,usedAi:usedAiInExercise.current};}})};setMistakes(newMistakesArray);};return/*#__PURE__*/_jsxs(ExerciseContext.Provider,{value:{withCoach,setWithCoach,exercise,isLoading,questionIndex,currentQuestion,numQuestions,// handleNextQuestion,\ncurrentLevel,setCurrentLevel,mistakes,handleAddMistake,usedAiInExercise,// handleUseGeneratedQuestions,\nhandleMoveToNextQuestion,resetMistakes,wordsMistaken,getMistakesCurrentQuestion},children:[children,/*#__PURE__*/_jsx(Outlet,{})]});}export default ExerciseProvider;export const useExerciseData=()=>{const data=useContext(ExerciseContext);if(!data)throw new Error(\"useExerciseData used outside of ExerciseContext Provider\");return data;};","map":{"version":3,"names":["createContext","useContext","useEffect","useRef","useState","Outlet","useNavigate","useParams","getExercise","jsx","_jsx","jsxs","_jsxs","ExerciseContext","ExerciseProvider","_ref","_exercise$questions","_exercise$questions2","children","navigate","exercise_id","withCoach","setWithCoach","exercise","setExercise","mistakes","setMistakes","isLoading","setIsLoading","questionIndex","setQuestionIndex","currentLevel","setCurrentLevel","usedAiInExercise","wordsMistaken","Set","currentQuestion","questions","at","numQuestions","length","fetch","data","err","console","log","resetMistakes","getMistakesCurrentQuestion","filter","el","question_id","handleMoveToNextQuestion","i","handleAddMistake","_ref2","mistake","current","add","newMistakesArray","map","question","currentMistakes","used_Ai","usedAi","Provider","value","useExerciseData","Error"],"sources":["/home/samoore/tpd/new/src/Contexts/ExerciseContext.js"],"sourcesContent":["import { createContext, useContext, useEffect, useRef, useState } from \"react\";\r\nimport { Outlet, useNavigate, useParams } from \"react-router-dom\";\r\nimport { getExercise } from \"../services/getQuestionsAPI\";\r\n\r\nconst ExerciseContext = createContext();\r\n\r\nfunction ExerciseProvider({ children }) {\r\n  const navigate = useNavigate();\r\n  const { exercise_id } = useParams();\r\n  const [withCoach, setWithCoach] = useState(false);\r\n  const [exercise, setExercise] = useState([]);\r\n  const [mistakes, setMistakes] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [questionIndex, setQuestionIndex] = useState(0);\r\n  const [currentLevel, setCurrentLevel] = useState(0);\r\n  // const [currentQuestion, setCurrentQuestion] = useState({});\r\n\r\n  const usedAiInExercise = useRef(false);\r\n\r\n  const wordsMistaken = useRef(new Set());\r\n\r\n  const currentQuestion = exercise?.questions?.at(questionIndex);\r\n  const numQuestions = exercise?.questions?.length;\r\n\r\n  useEffect(\r\n    function () {\r\n      if (exercise) {\r\n        setMistakes(exercise);\r\n      }\r\n    },\r\n    [exercise]\r\n  );\r\n\r\n  useEffect(\r\n    function () {\r\n      async function fetch() {\r\n        try {\r\n          setIsLoading(true);\r\n          const data = await getExercise(exercise_id);\r\n          setExercise(data);\r\n          // setCurrentQuestion(data?.questions?.at(0));\r\n        } catch (err) {\r\n          console.log(err);\r\n        } finally {\r\n          setIsLoading(false);\r\n        }\r\n      }\r\n\r\n      fetch();\r\n    },\r\n    [exercise_id]\r\n  );\r\n\r\n  const resetMistakes = () => {\r\n    setMistakes(exercise);\r\n  };\r\n\r\n  const getMistakesCurrentQuestion = () => {\r\n    return {\r\n      ...mistakes,\r\n      questions: mistakes.questions.filter(\r\n        (el) => el.question_id === currentQuestion.question_id\r\n      ),\r\n    };\r\n  };\r\n\r\n  const handleMoveToNextQuestion = () => {\r\n    // console.log(\"HANDLENextquestion\");\r\n    setQuestionIndex((i) => i + 1);\r\n    // setCurrentQuestion(exercise.questions.at(questionIndex));\r\n    return exercise.questions.at(questionIndex + 1);\r\n  };\r\n\r\n  // const handleNextQuestion = () => {\r\n  //   // handleAddMistake({ question_id: currentQuestion.question_id });\r\n  //   usedAiInExercise.current = false;\r\n  //   setCurrentLevel((level) => level + 1);\r\n  //   if (questionIndex < numQuestions - 1) {\r\n  //     const newIndex = questionIndex + 1;\r\n\r\n  //     setQuestionIndex(newIndex);\r\n  //     // setCurrentQuestion(exercise?.questions?.at(newIndex));\r\n  //   }\r\n  // };\r\n\r\n  // const handleUseGeneratedQuestions = (generatedQuestions) => {\r\n  //   setMistakes([]);\r\n  //   setExercise((exercise) => {\r\n  //     return { ...exercise, questions: [generatedQuestions] };\r\n  //   });\r\n  //   setQuestionIndex(0);\r\n  //   // setCurrentQuestion(generatedQuestions);\r\n  //   navigate(`/exercise/${exercise_id}/steps/ai_generated`);\r\n  // };\r\n\r\n  const handleAddMistake = ({ mistake }) => {\r\n    wordsMistaken.current.add(mistake);\r\n    const newMistakesArray = {\r\n      ...mistakes,\r\n      questions: mistakes.questions.map((question) => {\r\n        if (mistake && currentQuestion.question_id === question.question_id) {\r\n          const currentMistakes = question.mistakes\r\n            ? [...question.mistakes]\r\n            : [];\r\n\r\n          return {\r\n            ...question,\r\n            mistakes: [...currentMistakes, mistake],\r\n            used_Ai: usedAiInExercise.current,\r\n          };\r\n        } else {\r\n          return { ...question, usedAi: usedAiInExercise.current };\r\n        }\r\n      }),\r\n    };\r\n    setMistakes(newMistakesArray);\r\n  };\r\n\r\n  return (\r\n    <ExerciseContext.Provider\r\n      value={{\r\n        withCoach,\r\n        setWithCoach,\r\n        exercise,\r\n        isLoading,\r\n        questionIndex,\r\n        currentQuestion,\r\n        numQuestions,\r\n        // handleNextQuestion,\r\n        currentLevel,\r\n        setCurrentLevel,\r\n        mistakes,\r\n        handleAddMistake,\r\n        usedAiInExercise,\r\n        // handleUseGeneratedQuestions,\r\n        handleMoveToNextQuestion,\r\n        resetMistakes,\r\n        wordsMistaken,\r\n        getMistakesCurrentQuestion,\r\n      }}\r\n    >\r\n      {children}\r\n      <Outlet />\r\n    </ExerciseContext.Provider>\r\n  );\r\n}\r\n\r\nexport default ExerciseProvider;\r\n\r\nexport const useExerciseData = () => {\r\n  const data = useContext(ExerciseContext);\r\n  if (!data)\r\n    throw new Error(\"useExerciseData used outside of ExerciseContext Provider\");\r\n  return data;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}