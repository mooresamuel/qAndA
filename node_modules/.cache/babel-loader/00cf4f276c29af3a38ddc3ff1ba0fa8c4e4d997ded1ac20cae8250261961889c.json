{"ast":null,"code":"import{useEffect,useRef,useState}from\"react\";import{wordScoresAPI}from\"../services/wordScoresApi\";import{useRecordAudio}from\"./useRecordAudio\";export function useSpeechToText(text){const{isRecording,audioUrl,startRecording:startRec,stopRecording}=useRecordAudio();const[result,setResult]=useState(\"\");const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState(null);useEffect(function(){async function action(){await sendRecording();}action();},[audioUrl]);const sendRecording=async()=>{if(!audioUrl){// || !phrase) {\nsetError(\"Please record audio and enter a phrase first\");return;}setIsLoading(true);try{const response=await fetch(audioUrl);const audioBlob=await response.blob();// console.log(\"Sending blob of size:\", audioBlob.size, \"bytes\");\nconst formData=new FormData();formData.append(\"audio\",audioBlob,\"recording.webm\");formData.append(\"phrase\",text);// console.log(\"recording being sent\");\nconst data=await wordScoresAPI(formData);setResult(data);// console.log(\"Result:\", data);\nsetError(null);}catch(error){console.error(\"Error sending recording:\",error);setError(\"Error sending recording: \"+error.message);}finally{setIsLoading(false);}};const startRecording=async()=>{setResult(\"\");await startRec();};return{isRecording,isLoading,audioUrl,result,error,startRecording,stopRecording,sendRecording};}","map":{"version":3,"names":["useEffect","useRef","useState","wordScoresAPI","useRecordAudio","useSpeechToText","text","isRecording","audioUrl","startRecording","startRec","stopRecording","result","setResult","isLoading","setIsLoading","error","setError","action","sendRecording","response","fetch","audioBlob","blob","formData","FormData","append","data","console","message"],"sources":["/home/samoore/tpd/new/src/hooks/useSpeechToText.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport { wordScoresAPI } from \"../services/wordScoresApi\";\r\nimport { useRecordAudio } from \"./useRecordAudio\";\r\n\r\nexport function useSpeechToText(text) {\r\n  const {\r\n    isRecording,\r\n    audioUrl,\r\n    startRecording: startRec,\r\n    stopRecording,\r\n  } = useRecordAudio();\r\n  const [result, setResult] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(\r\n    function () {\r\n      async function action() {\r\n        await sendRecording();\r\n      }\r\n\r\n      action();\r\n    },\r\n    [audioUrl]\r\n  );\r\n\r\n  const sendRecording = async () => {\r\n    if (!audioUrl) {\r\n      // || !phrase) {\r\n      setError(\"Please record audio and enter a phrase first\");\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(audioUrl);\r\n      const audioBlob = await response.blob();\r\n      // console.log(\"Sending blob of size:\", audioBlob.size, \"bytes\");\r\n\r\n      const formData = new FormData();\r\n      formData.append(\"audio\", audioBlob, \"recording.webm\");\r\n      formData.append(\"phrase\", text);\r\n      // console.log(\"recording being sent\");\r\n      const data = await wordScoresAPI(formData);\r\n      setResult(data);\r\n      // console.log(\"Result:\", data);\r\n      setError(null);\r\n    } catch (error) {\r\n      console.error(\"Error sending recording:\", error);\r\n      setError(\"Error sending recording: \" + error.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const startRecording = async () => {\r\n    setResult(\"\");\r\n    await startRec();\r\n  };\r\n\r\n  return {\r\n    isRecording,\r\n    isLoading,\r\n    audioUrl,\r\n    result,\r\n    error,\r\n    startRecording,\r\n    stopRecording,\r\n    sendRecording,\r\n  };\r\n}\r\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,MAAM,CAAEC,QAAQ,KAAQ,OAAO,CACnD,OAASC,aAAa,KAAQ,2BAA2B,CACzD,OAASC,cAAc,KAAQ,kBAAkB,CAEjD,MAAO,SAAS,CAAAC,eAAeA,CAACC,IAAI,CAAE,CACpC,KAAM,CACJC,WAAW,CACXC,QAAQ,CACRC,cAAc,CAAEC,QAAQ,CACxBC,aACF,CAAC,CAAGP,cAAc,CAAC,CAAC,CACpB,KAAM,CAACQ,MAAM,CAAEC,SAAS,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CACxC,KAAM,CAACY,SAAS,CAAEC,YAAY,CAAC,CAAGb,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAACc,KAAK,CAAEC,QAAQ,CAAC,CAAGf,QAAQ,CAAC,IAAI,CAAC,CAExCF,SAAS,CACP,UAAY,CACV,cAAe,CAAAkB,MAAMA,CAAA,CAAG,CACtB,KAAM,CAAAC,aAAa,CAAC,CAAC,CACvB,CAEAD,MAAM,CAAC,CAAC,CACV,CAAC,CACD,CAACV,QAAQ,CACX,CAAC,CAED,KAAM,CAAAW,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,CAACX,QAAQ,CAAE,CACb;AACAS,QAAQ,CAAC,8CAA8C,CAAC,CACxD,OACF,CAEAF,YAAY,CAAC,IAAI,CAAC,CAClB,GAAI,CACF,KAAM,CAAAK,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACb,QAAQ,CAAC,CACtC,KAAM,CAAAc,SAAS,CAAG,KAAM,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CACvC;AAEA,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,CAAEJ,SAAS,CAAE,gBAAgB,CAAC,CACrDE,QAAQ,CAACE,MAAM,CAAC,QAAQ,CAAEpB,IAAI,CAAC,CAC/B;AACA,KAAM,CAAAqB,IAAI,CAAG,KAAM,CAAAxB,aAAa,CAACqB,QAAQ,CAAC,CAC1CX,SAAS,CAACc,IAAI,CAAC,CACf;AACAV,QAAQ,CAAC,IAAI,CAAC,CAChB,CAAE,MAAOD,KAAK,CAAE,CACdY,OAAO,CAACZ,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChDC,QAAQ,CAAC,2BAA2B,CAAGD,KAAK,CAACa,OAAO,CAAC,CACvD,CAAC,OAAS,CACRd,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAED,KAAM,CAAAN,cAAc,CAAG,KAAAA,CAAA,GAAY,CACjCI,SAAS,CAAC,EAAE,CAAC,CACb,KAAM,CAAAH,QAAQ,CAAC,CAAC,CAClB,CAAC,CAED,MAAO,CACLH,WAAW,CACXO,SAAS,CACTN,QAAQ,CACRI,MAAM,CACNI,KAAK,CACLP,cAAc,CACdE,aAAa,CACbQ,aACF,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}