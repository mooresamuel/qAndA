{"ast":null,"code":"var _jsxFileName = \"/home/samoore/tpd/new/src/pages/ExerciseEntryPoint.js\",\n  _s = $RefreshSig$();\nimport QuestionCompleteSentence from \"../components/QuestionCompleteSentence/QuestionCompleteSentence\";\nimport QuestionReadSentence from \"../components/QuestionReadSentence/QuestionReadSentence\";\nimport QuestionRepeatWord from \"../components/QuestionRepeatWord/QuestionRepeatWord\";\nimport QuestionRepeatWords from \"../components/QuestionRepeatWords/QuestionRepeatWords\";\nimport QuestionFindingMatchingWords from \"../components/QuestionFindingMatchingWords/QuestionFindingMatchingWords\";\nimport QuestionVowelLength from \"../components/QuestionVowelLength/QuestionVowelLength\";\nimport QuestionBasicComprehension from \"../components/QuestionBasicComprehension/QuestionBasicComprehension\";\nimport { useExerciseData } from \"../Contexts/ExerciseContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExerciseEntryPoint() {\n  _s();\n  const {\n    currentQuestion,\n    isLoading\n  } = useExerciseData();\n  if (isLoading) return null;\n  if (currentQuestion.question_type === \"repeat_words\") return /*#__PURE__*/_jsxDEV(QuestionRepeatWords, {\n    question: currentQuestion\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 12\n  }, this);\n  if (currentQuestion.question_type === \"repeat_word\") return /*#__PURE__*/_jsxDEV(QuestionRepeatWord, {\n    question: currentQuestion\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 12\n  }, this);\n  if (currentQuestion.question_type === \"repeat_sentence\") return /*#__PURE__*/_jsxDEV(QuestionReadSentence, {\n    question: currentQuestion\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 12\n  }, this);\n  if (currentQuestion.question_type === \"complete_sentence\") return /*#__PURE__*/_jsxDEV(QuestionCompleteSentence, {\n    question: currentQuestion\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 12\n  }, this);\n  if (currentQuestion.question_type === \"find_matching_words\") return /*#__PURE__*/_jsxDEV(QuestionFindingMatchingWords, {\n    question: currentQuestion\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 12\n  }, this);\n  // currentLevel={0} totalLevel={5} should come from the \"API question\" to work with the ProgressBar component\n  // you can name currentLevel totalLevel accordingly to the \"API question\"\n  // Ideally currentLevel should be 0 and totalLevel the max amount stages the level contains\n\n  if (currentQuestion.question_type === \"vowel_length\") return /*#__PURE__*/_jsxDEV(QuestionVowelLength, {\n    question: currentQuestion\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 12\n  }, this);\n  if (currentQuestion.question_type === \"basic_comprehension\") return /*#__PURE__*/_jsxDEV(QuestionBasicComprehension, {\n    question: currentQuestion\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 12\n  }, this);\n}\n_s(ExerciseEntryPoint, \"c/kRu7atmGTO6OKvGJSUD0G/Oh4=\", false, function () {\n  return [useExerciseData];\n});\n_c = ExerciseEntryPoint;\nexport default ExerciseEntryPoint;\nvar _c;\n$RefreshReg$(_c, \"ExerciseEntryPoint\");","map":{"version":3,"names":["QuestionCompleteSentence","QuestionReadSentence","QuestionRepeatWord","QuestionRepeatWords","QuestionFindingMatchingWords","QuestionVowelLength","QuestionBasicComprehension","useExerciseData","jsxDEV","_jsxDEV","ExerciseEntryPoint","_s","currentQuestion","isLoading","question_type","question","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/samoore/tpd/new/src/pages/ExerciseEntryPoint.js"],"sourcesContent":["import QuestionCompleteSentence from \"../components/QuestionCompleteSentence/QuestionCompleteSentence\";\r\nimport QuestionReadSentence from \"../components/QuestionReadSentence/QuestionReadSentence\";\r\nimport QuestionRepeatWord from \"../components/QuestionRepeatWord/QuestionRepeatWord\";\r\nimport QuestionRepeatWords from \"../components/QuestionRepeatWords/QuestionRepeatWords\";\r\nimport QuestionFindingMatchingWords from \"../components/QuestionFindingMatchingWords/QuestionFindingMatchingWords\";\r\nimport QuestionVowelLength from \"../components/QuestionVowelLength/QuestionVowelLength\";\r\nimport QuestionBasicComprehension from \"../components/QuestionBasicComprehension/QuestionBasicComprehension\";\r\nimport { useExerciseData } from \"../Contexts/ExerciseContext\";\r\n\r\nfunction ExerciseEntryPoint() {\r\n  const { currentQuestion, isLoading } = useExerciseData();\r\n\r\n  if (isLoading) return null;\r\n\r\n  if (currentQuestion.question_type === \"repeat_words\")\r\n    return <QuestionRepeatWords question={currentQuestion} />;\r\n\r\n  if (currentQuestion.question_type === \"repeat_word\")\r\n    return <QuestionRepeatWord question={currentQuestion} />;\r\n\r\n  if (currentQuestion.question_type === \"repeat_sentence\")\r\n    return <QuestionReadSentence question={currentQuestion} />;\r\n\r\n  if (currentQuestion.question_type === \"complete_sentence\")\r\n    return <QuestionCompleteSentence question={currentQuestion} />;\r\n\r\n  if (currentQuestion.question_type === \"find_matching_words\")\r\n    return <QuestionFindingMatchingWords question={currentQuestion} />;\r\n  // currentLevel={0} totalLevel={5} should come from the \"API question\" to work with the ProgressBar component\r\n  // you can name currentLevel totalLevel accordingly to the \"API question\"\r\n  // Ideally currentLevel should be 0 and totalLevel the max amount stages the level contains\r\n\r\n  if (currentQuestion.question_type === \"vowel_length\")\r\n    return <QuestionVowelLength question={currentQuestion} />;\r\n\r\n  if (currentQuestion.question_type === \"basic_comprehension\")\r\n    return <QuestionBasicComprehension question={currentQuestion} />;\r\n}\r\n\r\nexport default ExerciseEntryPoint;\r\n"],"mappings":";;AAAA,OAAOA,wBAAwB,MAAM,iEAAiE;AACtG,OAAOC,oBAAoB,MAAM,yDAAyD;AAC1F,OAAOC,kBAAkB,MAAM,qDAAqD;AACpF,OAAOC,mBAAmB,MAAM,uDAAuD;AACvF,OAAOC,4BAA4B,MAAM,yEAAyE;AAClH,OAAOC,mBAAmB,MAAM,uDAAuD;AACvF,OAAOC,0BAA0B,MAAM,qEAAqE;AAC5G,SAASC,eAAe,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM;IAAEC,eAAe;IAAEC;EAAU,CAAC,GAAGN,eAAe,CAAC,CAAC;EAExD,IAAIM,SAAS,EAAE,OAAO,IAAI;EAE1B,IAAID,eAAe,CAACE,aAAa,KAAK,cAAc,EAClD,oBAAOL,OAAA,CAACN,mBAAmB;IAACY,QAAQ,EAAEH;EAAgB;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAE3D,IAAIP,eAAe,CAACE,aAAa,KAAK,aAAa,EACjD,oBAAOL,OAAA,CAACP,kBAAkB;IAACa,QAAQ,EAAEH;EAAgB;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAE1D,IAAIP,eAAe,CAACE,aAAa,KAAK,iBAAiB,EACrD,oBAAOL,OAAA,CAACR,oBAAoB;IAACc,QAAQ,EAAEH;EAAgB;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAE5D,IAAIP,eAAe,CAACE,aAAa,KAAK,mBAAmB,EACvD,oBAAOL,OAAA,CAACT,wBAAwB;IAACe,QAAQ,EAAEH;EAAgB;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAEhE,IAAIP,eAAe,CAACE,aAAa,KAAK,qBAAqB,EACzD,oBAAOL,OAAA,CAACL,4BAA4B;IAACW,QAAQ,EAAEH;EAAgB;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EACpE;EACA;EACA;;EAEA,IAAIP,eAAe,CAACE,aAAa,KAAK,cAAc,EAClD,oBAAOL,OAAA,CAACJ,mBAAmB;IAACU,QAAQ,EAAEH;EAAgB;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAE3D,IAAIP,eAAe,CAACE,aAAa,KAAK,qBAAqB,EACzD,oBAAOL,OAAA,CAACH,0BAA0B;IAACS,QAAQ,EAAEH;EAAgB;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACpE;AAACR,EAAA,CA5BQD,kBAAkB;EAAA,QACcH,eAAe;AAAA;AAAAa,EAAA,GAD/CV,kBAAkB;AA8B3B,eAAeA,kBAAkB;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}