{"ast":null,"code":"import { API_URL } from \"../utils/constants\";\nexport async function textToSpeechAPI(message) {\n  const options = {\n    method: \"POST\",\n    headers: {\n      Accept: \"audio/mp3\",\n      // Expecting MP3 format as the response\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      message: message // The text message to synthesize\n    })\n  };\n  try {\n    // Fetch the audio data directly as a binary stream\n    const response = await fetch(`${API_URL}/speak_text`, options);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch audio\");\n    }\n\n    // Convert the raw binary data (audio) into a Blob object\n    const audioBlob = await response.blob();\n\n    // Create an object URL for the audio Blob\n    const audioUrl = URL.createObjectURL(audioBlob);\n\n    // Create an Audio element to play the audio\n    const audio = new Audio(audioUrl);\n\n    // Play the audio\n    audio.play();\n    return audio;\n  } catch (error) {\n    console.error(\"Error while fetching or playing audio:\", error);\n    throw error;\n  }\n}","map":{"version":3,"names":["API_URL","textToSpeechAPI","message","options","method","headers","Accept","body","JSON","stringify","response","fetch","ok","Error","audioBlob","blob","audioUrl","URL","createObjectURL","audio","Audio","play","error","console"],"sources":["/home/samoore/tpd/new/src/services/text2SpeechAPI.js"],"sourcesContent":["import { API_URL } from \"../utils/constants\";\r\n\r\nexport async function textToSpeechAPI(message) {\r\n  const options = {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"audio/mp3\",  // Expecting MP3 format as the response\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      message: message,  // The text message to synthesize\r\n    }),\r\n  };\r\n\r\n  try {\r\n    // Fetch the audio data directly as a binary stream\r\n    const response = await fetch(`${API_URL}/speak_text`, options);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch audio\");\r\n    }\r\n\r\n    // Convert the raw binary data (audio) into a Blob object\r\n    const audioBlob = await response.blob();\r\n\r\n    // Create an object URL for the audio Blob\r\n    const audioUrl = URL.createObjectURL(audioBlob);\r\n\r\n    // Create an Audio element to play the audio\r\n    const audio = new Audio(audioUrl);\r\n\r\n    // Play the audio\r\n    audio.play();\r\n\r\n    return audio;\r\n  } catch (error) {\r\n    console.error(\"Error while fetching or playing audio:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,oBAAoB;AAE5C,OAAO,eAAeC,eAAeA,CAACC,OAAO,EAAE;EAC7C,MAAMC,OAAO,GAAG;IACdC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,WAAW;MAAG;MACtB,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBP,OAAO,EAAEA,OAAO,CAAG;IACrB,CAAC;EACH,CAAC;EAED,IAAI;IACF;IACA,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,OAAO,aAAa,EAAEG,OAAO,CAAC;IAE9D,IAAI,CAACO,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;;IAEA;IACA,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;;IAEvC;IACA,MAAMC,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACJ,SAAS,CAAC;;IAE/C;IACA,MAAMK,KAAK,GAAG,IAAIC,KAAK,CAACJ,QAAQ,CAAC;;IAEjC;IACAG,KAAK,CAACE,IAAI,CAAC,CAAC;IAEZ,OAAOF,KAAK;EACd,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}