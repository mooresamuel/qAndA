{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { textToSpeechAPI } from \"../services/text2SpeechAPI\";\nexport default function useTextToSpeech() {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [audioCached, setAudioCached] = useState(\"\");\n  async function speak(text) {\n    setIsLoading(true);\n    if (!audioCached) {\n      const audioData = await textToSpeechAPI(text);\n      setAudioCached(audioData);\n      playAudio(audioData);\n    } else {\n      audioCached.play();\n    }\n    setIsLoading(false);\n  }\n  function playAudio(audioData) {\n    const audioBlob = new Blob([Uint8Array.from(atob(audioData), c => c.charCodeAt(0))], {\n      type: \"audio/mp3\"\n    });\n    const audioUrl = URL.createObjectURL(audioBlob);\n    const audio = new Audio(audioUrl);\n    if (!audioCached) setAudioCached(audio);\n    audio.play();\n  }\n  return {\n    isLoading,\n    speak\n  };\n}\n_s(useTextToSpeech, \"nEoaXULG+B/BZom8HOC+ykCpKOE=\");","map":{"version":3,"names":["useState","textToSpeechAPI","useTextToSpeech","_s","isLoading","setIsLoading","audioCached","setAudioCached","speak","text","audioData","playAudio","play","audioBlob","Blob","Uint8Array","from","atob","c","charCodeAt","type","audioUrl","URL","createObjectURL","audio","Audio"],"sources":["/home/samoore/tpd/new/src/hooks/useTextToSpeech.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { textToSpeechAPI } from \"../services/text2SpeechAPI\";\r\n\r\nexport default function useTextToSpeech() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [audioCached, setAudioCached] = useState(\"\");\r\n\r\n  async function speak(text) {\r\n    setIsLoading(true);\r\n\r\n    if (!audioCached) {\r\n      const audioData = await textToSpeechAPI(text);\r\n      setAudioCached(audioData);\r\n      playAudio(audioData);\r\n    } else {\r\n      audioCached.play();\r\n    }\r\n\r\n    setIsLoading(false);\r\n  }\r\n\r\n  function playAudio(audioData) {\r\n    const audioBlob = new Blob(\r\n      [Uint8Array.from(atob(audioData), (c) => c.charCodeAt(0))],\r\n      { type: \"audio/mp3\" }\r\n    );\r\n    const audioUrl = URL.createObjectURL(audioBlob);\r\n    const audio = new Audio(audioUrl);\r\n    if (!audioCached) setAudioCached(audio);\r\n    audio.play();\r\n  }\r\n\r\n  return { isLoading, speak };\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,eAAe,QAAQ,4BAA4B;AAE5D,eAAe,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACxC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAElD,eAAeQ,KAAKA,CAACC,IAAI,EAAE;IACzBJ,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI,CAACC,WAAW,EAAE;MAChB,MAAMI,SAAS,GAAG,MAAMT,eAAe,CAACQ,IAAI,CAAC;MAC7CF,cAAc,CAACG,SAAS,CAAC;MACzBC,SAAS,CAACD,SAAS,CAAC;IACtB,CAAC,MAAM;MACLJ,WAAW,CAACM,IAAI,CAAC,CAAC;IACpB;IAEAP,YAAY,CAAC,KAAK,CAAC;EACrB;EAEA,SAASM,SAASA,CAACD,SAAS,EAAE;IAC5B,MAAMG,SAAS,GAAG,IAAIC,IAAI,CACxB,CAACC,UAAU,CAACC,IAAI,CAACC,IAAI,CAACP,SAAS,CAAC,EAAGQ,CAAC,IAAKA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,EAC1D;MAAEC,IAAI,EAAE;IAAY,CACtB,CAAC;IACD,MAAMC,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACV,SAAS,CAAC;IAC/C,MAAMW,KAAK,GAAG,IAAIC,KAAK,CAACJ,QAAQ,CAAC;IACjC,IAAI,CAACf,WAAW,EAAEC,cAAc,CAACiB,KAAK,CAAC;IACvCA,KAAK,CAACZ,IAAI,CAAC,CAAC;EACd;EAEA,OAAO;IAAER,SAAS;IAAEI;EAAM,CAAC;AAC7B;AAACL,EAAA,CA9BuBD,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}