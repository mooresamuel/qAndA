{"ast":null,"code":"import { API_URL } from \"../utils/constants\";\nexport async function textToSpeechAPI(message) {\n  const options = {\n    method: \"POST\",\n    headers: {\n      Accept: \"audio/mp3\",\n      // Expect MP3 audio from backend\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      message: message\n    }) // Send text message to backend\n  };\n  try {\n    const response = await fetch(`${API_URL}/speak_text`, options);\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch audio\");\n    }\n    const audioBlob = await response.blob(); // Get audio blob\n    const audioUrl = URL.createObjectURL(audioBlob); // Create object URL from blob\n\n    const audio = new Audio(audioUrl); // Create audio element\n    audio.play(); // Play the audio\n  } catch (error) {\n    console.error(\"Error while fetching or playing audio:\", error);\n    throw error;\n  }\n}","map":{"version":3,"names":["API_URL","textToSpeechAPI","message","options","method","headers","Accept","body","JSON","stringify","response","fetch","ok","Error","audioBlob","blob","audioUrl","URL","createObjectURL","audio","Audio","play","error","console"],"sources":["/home/samoore/tpd/new/src/services/text2SpeechAPI.js"],"sourcesContent":["import { API_URL } from \"../utils/constants\";\r\n\r\nexport async function textToSpeechAPI(message) {\r\n  const options = {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"audio/mp3\",  // Expect MP3 audio from backend\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ message: message }),  // Send text message to backend\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(`${API_URL}/speak_text`, options);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch audio\");\r\n    }\r\n\r\n    const audioBlob = await response.blob();  // Get audio blob\r\n    const audioUrl = URL.createObjectURL(audioBlob);  // Create object URL from blob\r\n\r\n    const audio = new Audio(audioUrl);  // Create audio element\r\n    audio.play();  // Play the audio\r\n\r\n  } catch (error) {\r\n    console.error(\"Error while fetching or playing audio:\", error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,oBAAoB;AAE5C,OAAO,eAAeC,eAAeA,CAACC,OAAO,EAAE;EAC7C,MAAMC,OAAO,GAAG;IACdC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,WAAW;MAAG;MACtB,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,OAAO,EAAEA;IAAQ,CAAC,CAAC,CAAG;EAC/C,CAAC;EAED,IAAI;IACF,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,OAAO,aAAa,EAAEG,OAAO,CAAC;IAE9D,IAAI,CAACO,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IAEA,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC,CAAE;IAC1C,MAAMC,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACJ,SAAS,CAAC,CAAC,CAAE;;IAElD,MAAMK,KAAK,GAAG,IAAIC,KAAK,CAACJ,QAAQ,CAAC,CAAC,CAAE;IACpCG,KAAK,CAACE,IAAI,CAAC,CAAC,CAAC,CAAE;EAEjB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}