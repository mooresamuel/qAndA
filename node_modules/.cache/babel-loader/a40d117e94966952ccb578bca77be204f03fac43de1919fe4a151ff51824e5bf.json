{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nexport function useRecordAudio() {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioUrl, setAudioUrl] = useState(null);\n  const [isStreamReady, setIsStreamReady] = useState(false);\n  const [error, setError] = useState(null);\n  const mediaStreamRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const audioElementRef = useRef(null);\n  useEffect(() => {\n    initAudioStream();\n    return () => {\n      cleanupAudioStream();\n      if (audioUrl) {\n        URL.revokeObjectURL(audioUrl);\n      }\n    };\n  }, []);\n  const initAudioStream = async () => {\n    try {\n      console.log(\"Requesting microphone access...\");\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          channelCount: 1,\n          sampleRate: 16000\n        }\n      });\n      console.log(\"Microphone access granted\");\n      mediaStreamRef.current = stream;\n\n      // Check available MIME types\n      const mimeType = MediaRecorder.isTypeSupported(\"audio/webm\") ? \"audio/webm\" : MediaRecorder.isTypeSupported(\"audio/mp4\") ? \"audio/mp4\" : \"audio/ogg\";\n      console.log(\"Using MIME type:\", mimeType);\n      mediaRecorderRef.current = new MediaRecorder(stream, {\n        mimeType: mimeType\n      });\n      mediaRecorderRef.current.ondataavailable = event => {\n        console.log(\"Data available:\", event.data.size, \"bytes\");\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorderRef.current.onstart = () => {\n        console.log(\"Recording started\");\n        audioChunksRef.current = [];\n      };\n      mediaRecorderRef.current.onstop = async () => {\n        console.log(\"Recording stopped, processing chunks...\");\n        const audioBlob = new Blob(audioChunksRef.current, {\n          type: mimeType\n        });\n        console.log(\"Created blob of size:\", audioBlob.size, \"bytes\");\n        if (audioUrl) {\n          URL.revokeObjectURL(audioUrl);\n        }\n        const url = URL.createObjectURL(audioBlob);\n        setAudioUrl(url);\n        if (audioElementRef.current) {\n          audioElementRef.current.load();\n        }\n      };\n      mediaRecorderRef.current.onerror = event => {\n        console.error(\"MediaRecorder error:\", event.error);\n        setError(\"Recording error: \" + event.error.message);\n      };\n      setIsStreamReady(true);\n      setError(null);\n    } catch (error) {\n      console.error(\"Error initializing audio stream:\", error);\n      setError(\"Error accessing microphone: \" + error.message);\n      setIsStreamReady(false);\n    }\n  };\n  const cleanupAudioStream = () => {\n    console.log(\"Cleaning up audio stream...\");\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n    }\n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => {\n        track.stop();\n        console.log(\"Track stopped:\", track.kind);\n      });\n    }\n    if (audioUrl) {\n      URL.revokeObjectURL(audioUrl);\n    }\n    setIsStreamReady(false);\n    setAudioUrl(null);\n    setIsRecording(false);\n    console.log(\"Cleanup complete\");\n  };\n  const startRecording = async () => {\n    try {\n      if (!isStreamReady) {\n        await initAudioStream();\n      }\n      if (!mediaRecorderRef.current || mediaRecorderRef.current.state === \"inactive\") {\n        console.log(\"Starting recording...\");\n        audioChunksRef.current = [];\n        mediaRecorderRef.current.start(1000); // Collect data every second\n        setIsRecording(true);\n        setError(null);\n      }\n    } catch (error) {\n      console.error(\"Error starting recording:\", error);\n      setError(\"Error starting recording: \" + error.message);\n    }\n  };\n  const stopRecording = async () => {\n    try {\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\n        console.log(\"Stopping recording...\");\n        mediaRecorderRef.current.stop();\n        setIsRecording(false);\n      }\n    } catch (error) {\n      console.error(\"Error stopping recording:\", error);\n      setError(\"Error stopping recording: \" + error.message);\n    }\n  };\n  return {\n    isRecording,\n    error,\n    audioUrl,\n    startRecording,\n    stopRecording\n  };\n}\n_s(useRecordAudio, \"R+IvebO2NwA4VkDWMbUs00mddYg=\");","map":{"version":3,"names":["useEffect","useRef","useState","useRecordAudio","_s","isRecording","setIsRecording","audioUrl","setAudioUrl","isStreamReady","setIsStreamReady","error","setError","mediaStreamRef","mediaRecorderRef","audioChunksRef","audioElementRef","initAudioStream","cleanupAudioStream","URL","revokeObjectURL","console","log","stream","navigator","mediaDevices","getUserMedia","audio","channelCount","sampleRate","current","mimeType","MediaRecorder","isTypeSupported","ondataavailable","event","data","size","push","onstart","onstop","audioBlob","Blob","type","url","createObjectURL","load","onerror","message","stop","getTracks","forEach","track","kind","startRecording","state","start","stopRecording"],"sources":["/home/samoore/tpd/new/src/hooks/useRecordAudio.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\n\r\nexport function useRecordAudio() {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [audioUrl, setAudioUrl] = useState(null);\r\n  const [isStreamReady, setIsStreamReady] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const mediaStreamRef = useRef(null);\r\n  const mediaRecorderRef = useRef(null);\r\n  const audioChunksRef = useRef([]);\r\n  const audioElementRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    initAudioStream();\r\n    return () => {\r\n      cleanupAudioStream();\r\n      if (audioUrl) {\r\n        URL.revokeObjectURL(audioUrl);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const initAudioStream = async () => {\r\n    try {\r\n      console.log(\"Requesting microphone access...\");\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        audio: {\r\n          channelCount: 1,\r\n          sampleRate: 16000,\r\n        },\r\n      });\r\n      console.log(\"Microphone access granted\");\r\n\r\n      mediaStreamRef.current = stream;\r\n\r\n      // Check available MIME types\r\n      const mimeType = MediaRecorder.isTypeSupported(\"audio/webm\")\r\n        ? \"audio/webm\"\r\n        : MediaRecorder.isTypeSupported(\"audio/mp4\")\r\n        ? \"audio/mp4\"\r\n        : \"audio/ogg\";\r\n\r\n      console.log(\"Using MIME type:\", mimeType);\r\n\r\n      mediaRecorderRef.current = new MediaRecorder(stream, {\r\n        mimeType: mimeType,\r\n      });\r\n\r\n      mediaRecorderRef.current.ondataavailable = (event) => {\r\n        console.log(\"Data available:\", event.data.size, \"bytes\");\r\n        if (event.data.size > 0) {\r\n          audioChunksRef.current.push(event.data);\r\n        }\r\n      };\r\n\r\n      mediaRecorderRef.current.onstart = () => {\r\n        console.log(\"Recording started\");\r\n        audioChunksRef.current = [];\r\n      };\r\n\r\n      mediaRecorderRef.current.onstop = async () => {\r\n        console.log(\"Recording stopped, processing chunks...\");\r\n        const audioBlob = new Blob(audioChunksRef.current, { type: mimeType });\r\n        console.log(\"Created blob of size:\", audioBlob.size, \"bytes\");\r\n\r\n        if (audioUrl) {\r\n          URL.revokeObjectURL(audioUrl);\r\n        }\r\n\r\n        const url = URL.createObjectURL(audioBlob);\r\n        setAudioUrl(url);\r\n\r\n        if (audioElementRef.current) {\r\n          audioElementRef.current.load();\r\n        }\r\n      };\r\n\r\n      mediaRecorderRef.current.onerror = (event) => {\r\n        console.error(\"MediaRecorder error:\", event.error);\r\n        setError(\"Recording error: \" + event.error.message);\r\n      };\r\n\r\n      setIsStreamReady(true);\r\n      setError(null);\r\n    } catch (error) {\r\n      console.error(\"Error initializing audio stream:\", error);\r\n      setError(\"Error accessing microphone: \" + error.message);\r\n      setIsStreamReady(false);\r\n    }\r\n  };\r\n\r\n  const cleanupAudioStream = () => {\r\n    console.log(\"Cleaning up audio stream...\");\r\n    if (mediaRecorderRef.current && isRecording) {\r\n      mediaRecorderRef.current.stop();\r\n    }\r\n    if (mediaStreamRef.current) {\r\n      mediaStreamRef.current.getTracks().forEach((track) => {\r\n        track.stop();\r\n        console.log(\"Track stopped:\", track.kind);\r\n      });\r\n    }\r\n    if (audioUrl) {\r\n      URL.revokeObjectURL(audioUrl);\r\n    }\r\n    setIsStreamReady(false);\r\n    setAudioUrl(null);\r\n    setIsRecording(false);\r\n    console.log(\"Cleanup complete\");\r\n  };\r\n\r\n  const startRecording = async () => {\r\n    try {\r\n      if (!isStreamReady) {\r\n        await initAudioStream();\r\n      }\r\n\r\n      if (\r\n        !mediaRecorderRef.current ||\r\n        mediaRecorderRef.current.state === \"inactive\"\r\n      ) {\r\n        console.log(\"Starting recording...\");\r\n        audioChunksRef.current = [];\r\n        mediaRecorderRef.current.start(1000); // Collect data every second\r\n        setIsRecording(true);\r\n        setError(null);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error starting recording:\", error);\r\n      setError(\"Error starting recording: \" + error.message);\r\n    }\r\n  };\r\n\r\n  const stopRecording = async () => {\r\n    try {\r\n      if (\r\n        mediaRecorderRef.current &&\r\n        mediaRecorderRef.current.state !== \"inactive\"\r\n      ) {\r\n        console.log(\"Stopping recording...\");\r\n        mediaRecorderRef.current.stop();\r\n        setIsRecording(false);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error stopping recording:\", error);\r\n      setError(\"Error stopping recording: \" + error.message);\r\n    }\r\n  };\r\n\r\n  return { isRecording, error, audioUrl, startRecording, stopRecording };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}