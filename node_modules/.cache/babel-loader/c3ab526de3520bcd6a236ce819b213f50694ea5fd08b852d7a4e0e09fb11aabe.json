{"ast":null,"code":"import { API_URL } from \"../utils/constants\";\nexport async function textToSpeechAPI(message) {\n  const options = {\n    method: \"POST\",\n    headers: {\n      Accept: \"audio/mp3\",\n      // Expecting MP3 format as the response\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      message: message // The text message to synthesize\n    })\n  };\n\n  // Fetch the audio data directly as a binary stream\n  const response = await fetch(`${API_URL}/speak_text`, options);\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch audio\");\n  }\n\n  // Create an audio element to play the streamed response\n  const audioBlob = await response.blob(); // Get the Blob from the response\n  const audioUrl = URL.createObjectURL(audioBlob); // Create an object URL for the Blob\n\n  const audio = new Audio(audioUrl); // Create an Audio object with the Blob URL\n  audio.play(); // Play the audio immediately\n\n  return audio; // Return the audio element if you need to manipulate it later\n}","map":{"version":3,"names":["API_URL","textToSpeechAPI","message","options","method","headers","Accept","body","JSON","stringify","response","fetch","ok","Error","audioBlob","blob","audioUrl","URL","createObjectURL","audio","Audio","play"],"sources":["/home/samoore/tpd/new/src/services/text2SpeechAPI.js"],"sourcesContent":["import { API_URL } from \"../utils/constants\";\r\n\r\nexport async function textToSpeechAPI(message) {\r\n  const options = {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"audio/mp3\",  // Expecting MP3 format as the response\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      message: message,  // The text message to synthesize\r\n    }),\r\n  };\r\n\r\n  // Fetch the audio data directly as a binary stream\r\n  const response = await fetch(`${API_URL}/speak_text`, options);\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"Failed to fetch audio\");\r\n  }\r\n\r\n  // Create an audio element to play the streamed response\r\n  const audioBlob = await response.blob(); // Get the Blob from the response\r\n  const audioUrl = URL.createObjectURL(audioBlob); // Create an object URL for the Blob\r\n\r\n  const audio = new Audio(audioUrl);  // Create an Audio object with the Blob URL\r\n  audio.play();  // Play the audio immediately\r\n\r\n  return audio;  // Return the audio element if you need to manipulate it later\r\n}\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,oBAAoB;AAE5C,OAAO,eAAeC,eAAeA,CAACC,OAAO,EAAE;EAC7C,MAAMC,OAAO,GAAG;IACdC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,WAAW;MAAG;MACtB,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBP,OAAO,EAAEA,OAAO,CAAG;IACrB,CAAC;EACH,CAAC;;EAED;EACA,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,OAAO,aAAa,EAAEG,OAAO,CAAC;EAE9D,IAAI,CAACO,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1C;;EAEA;EACA,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;EACzC,MAAMC,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACJ,SAAS,CAAC,CAAC,CAAC;;EAEjD,MAAMK,KAAK,GAAG,IAAIC,KAAK,CAACJ,QAAQ,CAAC,CAAC,CAAE;EACpCG,KAAK,CAACE,IAAI,CAAC,CAAC,CAAC,CAAE;;EAEf,OAAOF,KAAK,CAAC,CAAE;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}